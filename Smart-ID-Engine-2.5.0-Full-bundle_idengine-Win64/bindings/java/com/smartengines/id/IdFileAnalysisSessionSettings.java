/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.smartengines.id;

import com.smartengines.common.*;

public class IdFileAnalysisSessionSettings {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public IdFileAnalysisSessionSettings(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(IdFileAnalysisSessionSettings obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(IdFileAnalysisSessionSettings obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jniidengineJNI.delete_IdFileAnalysisSessionSettings(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public IdFileAnalysisSessionSettings Clone() {
    long cPtr = jniidengineJNI.IdFileAnalysisSessionSettings_Clone(swigCPtr, this);
    return (cPtr == 0) ? null : new IdFileAnalysisSessionSettings(cPtr, true);
  }

  public int GetOptionsCount() {
    return jniidengineJNI.IdFileAnalysisSessionSettings_GetOptionsCount(swigCPtr, this);
  }

  public String GetOption(String option_name) {
    return jniidengineJNI.IdFileAnalysisSessionSettings_GetOption(swigCPtr, this, option_name);
  }

  public boolean HasOption(String option_name) {
    return jniidengineJNI.IdFileAnalysisSessionSettings_HasOption(swigCPtr, this, option_name);
  }

  public void SetOption(String option_name, String option_value) {
    jniidengineJNI.IdFileAnalysisSessionSettings_SetOption(swigCPtr, this, option_name, option_value);
  }

  public void RemoveOption(String option_name) {
    jniidengineJNI.IdFileAnalysisSessionSettings_RemoveOption(swigCPtr, this, option_name);
  }

  public StringsMapIterator OptionsBegin() {
    return new StringsMapIterator(jniidengineJNI.IdFileAnalysisSessionSettings_OptionsBegin(swigCPtr, this), true);
  }

  public StringsMapIterator OptionsEnd() {
    return new StringsMapIterator(jniidengineJNI.IdFileAnalysisSessionSettings_OptionsEnd(swigCPtr, this), true);
  }

  public int GetSupportedForensicFieldsCount() {
    return jniidengineJNI.IdFileAnalysisSessionSettings_GetSupportedForensicFieldsCount(swigCPtr, this);
  }

  public boolean HasSupportedForensicField(String field_name) {
    return jniidengineJNI.IdFileAnalysisSessionSettings_HasSupportedForensicField(swigCPtr, this, field_name);
  }

  public StringsSetIterator SupportedForensicFieldsBegin() {
    return new StringsSetIterator(jniidengineJNI.IdFileAnalysisSessionSettings_SupportedForensicFieldsBegin(swigCPtr, this), true);
  }

  public StringsSetIterator SupportedForensicFieldsEnd() {
    return new StringsSetIterator(jniidengineJNI.IdFileAnalysisSessionSettings_SupportedForensicFieldsEnd(swigCPtr, this), true);
  }

  public int GetEnabledForensicFieldsCount() {
    return jniidengineJNI.IdFileAnalysisSessionSettings_GetEnabledForensicFieldsCount(swigCPtr, this);
  }

  public boolean HasEnabledForensicField(String field_name) {
    return jniidengineJNI.IdFileAnalysisSessionSettings_HasEnabledForensicField(swigCPtr, this, field_name);
  }

  public StringsSetIterator EnabledForensicFieldsBegin() {
    return new StringsSetIterator(jniidengineJNI.IdFileAnalysisSessionSettings_EnabledForensicFieldsBegin(swigCPtr, this), true);
  }

  public StringsSetIterator EnabledForensicFieldsEnd() {
    return new StringsSetIterator(jniidengineJNI.IdFileAnalysisSessionSettings_EnabledForensicFieldsEnd(swigCPtr, this), true);
  }

  public void EnableForensicField(String field_name) {
    jniidengineJNI.IdFileAnalysisSessionSettings_EnableForensicField(swigCPtr, this, field_name);
  }

  public void DisableForensicField(String field_name) {
    jniidengineJNI.IdFileAnalysisSessionSettings_DisableForensicField(swigCPtr, this, field_name);
  }

}
