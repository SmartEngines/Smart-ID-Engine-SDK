# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyidengine
else:
    import _pyidengine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SerializationParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_SerializationParameters

    def __init__(self, *args):
        _pyidengine.SerializationParameters_swiginit(self, _pyidengine.new_SerializationParameters(*args))

    def HasIgnoredObjectType(self, object_type):
        return _pyidengine.SerializationParameters_HasIgnoredObjectType(self, object_type)

    def AddIgnoredObjectType(self, object_type):
        return _pyidengine.SerializationParameters_AddIgnoredObjectType(self, object_type)

    def RemoveIgnoredObjectType(self, object_type):
        return _pyidengine.SerializationParameters_RemoveIgnoredObjectType(self, object_type)

    def IgnoredObjectTypesBegin(self):
        return _pyidengine.SerializationParameters_IgnoredObjectTypesBegin(self)

    def IgnoredObjectTypesEnd(self):
        return _pyidengine.SerializationParameters_IgnoredObjectTypesEnd(self)

    def HasIgnoredKey(self, key):
        return _pyidengine.SerializationParameters_HasIgnoredKey(self, key)

    def AddIgnoredKey(self, key):
        return _pyidengine.SerializationParameters_AddIgnoredKey(self, key)

    def RemoveIgnoredKey(self, key):
        return _pyidengine.SerializationParameters_RemoveIgnoredKey(self, key)

    def IgnoredKeysBegin(self):
        return _pyidengine.SerializationParameters_IgnoredKeysBegin(self)

    def IgnoredKeysEnd(self):
        return _pyidengine.SerializationParameters_IgnoredKeysEnd(self)

# Register SerializationParameters in _pyidengine:
_pyidengine.SerializationParameters_swigregister(SerializationParameters)
class Serializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_Serializer

    def Reset(self):
        return _pyidengine.Serializer_Reset(self)

    def GetCStr(self):
        return _pyidengine.Serializer_GetCStr(self)

    def SerializerType(self):
        return _pyidengine.Serializer_SerializerType(self)

    @staticmethod
    def CreateJSONSerializer(params):
        return _pyidengine.Serializer_CreateJSONSerializer(params)

# Register Serializer in _pyidengine:
_pyidengine.Serializer_swigregister(Serializer)
class Rectangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.Rectangle_swiginit(self, _pyidengine.new_Rectangle(*args))

    def Serialize(self, serializer):
        return _pyidengine.Rectangle_Serialize(self, serializer)
    x = property(_pyidengine.Rectangle_x_get, _pyidengine.Rectangle_x_set)
    y = property(_pyidengine.Rectangle_y_get, _pyidengine.Rectangle_y_set)
    width = property(_pyidengine.Rectangle_width_get, _pyidengine.Rectangle_width_set)
    height = property(_pyidengine.Rectangle_height_get, _pyidengine.Rectangle_height_set)
    __swig_destroy__ = _pyidengine.delete_Rectangle

# Register Rectangle in _pyidengine:
_pyidengine.Rectangle_swigregister(Rectangle)
class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.Point_swiginit(self, _pyidengine.new_Point(*args))

    def Serialize(self, serializer):
        return _pyidengine.Point_Serialize(self, serializer)
    x = property(_pyidengine.Point_x_get, _pyidengine.Point_x_set)
    y = property(_pyidengine.Point_y_get, _pyidengine.Point_y_set)
    __swig_destroy__ = _pyidengine.delete_Point

# Register Point in _pyidengine:
_pyidengine.Point_swigregister(Point)
class Size(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.Size_swiginit(self, _pyidengine.new_Size(*args))

    def Serialize(self, serializer):
        return _pyidengine.Size_Serialize(self, serializer)
    width = property(_pyidengine.Size_width_get, _pyidengine.Size_width_set)
    height = property(_pyidengine.Size_height_get, _pyidengine.Size_height_set)
    __swig_destroy__ = _pyidengine.delete_Size

# Register Size in _pyidengine:
_pyidengine.Size_swigregister(Size)
class Quadrangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.Quadrangle_swiginit(self, _pyidengine.new_Quadrangle(*args))

    def GetPoint(self, index):
        return _pyidengine.Quadrangle_GetPoint(self, index)

    def GetMutablePoint(self, index):
        return _pyidengine.Quadrangle_GetMutablePoint(self, index)

    def SetPoint(self, index, p):
        return _pyidengine.Quadrangle_SetPoint(self, index, p)

    def GetBoundingRectangle(self):
        return _pyidengine.Quadrangle_GetBoundingRectangle(self)

    def Serialize(self, serializer):
        return _pyidengine.Quadrangle_Serialize(self, serializer)
    __swig_destroy__ = _pyidengine.delete_Quadrangle

# Register Quadrangle in _pyidengine:
_pyidengine.Quadrangle_swigregister(Quadrangle)
class QuadranglesMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pyidengine.QuadranglesMapIterator_swiginit(self, _pyidengine.new_QuadranglesMapIterator(other))
    __swig_destroy__ = _pyidengine.delete_QuadranglesMapIterator

    def GetKey(self):
        return _pyidengine.QuadranglesMapIterator_GetKey(self)

    def GetValue(self):
        return _pyidengine.QuadranglesMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.QuadranglesMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.QuadranglesMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.QuadranglesMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.QuadranglesMapIterator_Advance(self)

# Register QuadranglesMapIterator in _pyidengine:
_pyidengine.QuadranglesMapIterator_swigregister(QuadranglesMapIterator)
class RectanglesVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pyidengine.RectanglesVectorIterator_swiginit(self, _pyidengine.new_RectanglesVectorIterator(other))
    __swig_destroy__ = _pyidengine.delete_RectanglesVectorIterator

    def GetValue(self):
        return _pyidengine.RectanglesVectorIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.RectanglesVectorIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.RectanglesVectorIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.RectanglesVectorIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.RectanglesVectorIterator_Advance(self)

# Register RectanglesVectorIterator in _pyidengine:
_pyidengine.RectanglesVectorIterator_swigregister(RectanglesVectorIterator)
class Polygon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.Polygon_swiginit(self, _pyidengine.new_Polygon(*args))
    __swig_destroy__ = _pyidengine.delete_Polygon

    def GetPointsCount(self):
        return _pyidengine.Polygon_GetPointsCount(self)

    def GetPoints(self):
        return _pyidengine.Polygon_GetPoints(self)

    def GetPoint(self, index):
        return _pyidengine.Polygon_GetPoint(self, index)

    def GetMutablePoint(self, index):
        return _pyidengine.Polygon_GetMutablePoint(self, index)

    def SetPoint(self, index, p):
        return _pyidengine.Polygon_SetPoint(self, index, p)

    def Resize(self, size):
        return _pyidengine.Polygon_Resize(self, size)

    def GetBoundingRectangle(self):
        return _pyidengine.Polygon_GetBoundingRectangle(self)

    def Serialize(self, serializer):
        return _pyidengine.Polygon_Serialize(self, serializer)

# Register Polygon in _pyidengine:
_pyidengine.Polygon_swigregister(Polygon)
class ProjectiveTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def CanCreate(*args):
        return _pyidengine.ProjectiveTransform_CanCreate(*args)

    @staticmethod
    def Create(*args):
        return _pyidengine.ProjectiveTransform_Create(*args)
    __swig_destroy__ = _pyidengine.delete_ProjectiveTransform

    def Clone(self):
        return _pyidengine.ProjectiveTransform_Clone(self)

    def TransformPoint(self, p):
        return _pyidengine.ProjectiveTransform_TransformPoint(self, p)

    def TransformQuad(self, q):
        return _pyidengine.ProjectiveTransform_TransformQuad(self, q)

    def TransformPolygon(self, poly):
        return _pyidengine.ProjectiveTransform_TransformPolygon(self, poly)

    def IsInvertable(self):
        return _pyidengine.ProjectiveTransform_IsInvertable(self)

    def Invert(self):
        return _pyidengine.ProjectiveTransform_Invert(self)

    def CloneInverted(self):
        return _pyidengine.ProjectiveTransform_CloneInverted(self)

    def Serialize(self, serializer):
        return _pyidengine.ProjectiveTransform_Serialize(self, serializer)

# Register ProjectiveTransform in _pyidengine:
_pyidengine.ProjectiveTransform_swigregister(ProjectiveTransform)
class MutableString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.MutableString_swiginit(self, _pyidengine.new_MutableString(*args))
    __swig_destroy__ = _pyidengine.delete_MutableString

    def __iadd__(self, other):
        return _pyidengine.MutableString___iadd__(self, other)

    def __add__(self, other):
        return _pyidengine.MutableString___add__(self, other)

    def GetCStr(self):
        return _pyidengine.MutableString_GetCStr(self)

    def GetLength(self):
        return _pyidengine.MutableString_GetLength(self)

    def Serialize(self, serializer):
        return _pyidengine.MutableString_Serialize(self, serializer)

# Register MutableString in _pyidengine:
_pyidengine.MutableString_swigregister(MutableString)
class OcrCharVariant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.OcrCharVariant_swiginit(self, _pyidengine.new_OcrCharVariant(*args))
    __swig_destroy__ = _pyidengine.delete_OcrCharVariant

    def GetCharacter(self):
        return _pyidengine.OcrCharVariant_GetCharacter(self)

    def SetCharacter(self, *args):
        return _pyidengine.OcrCharVariant_SetCharacter(self, *args)

    def GetConfidence(self):
        return _pyidengine.OcrCharVariant_GetConfidence(self)

    def SetConfidence(self, confidence):
        return _pyidengine.OcrCharVariant_SetConfidence(self, confidence)

    def GetInternalScore(self):
        return _pyidengine.OcrCharVariant_GetInternalScore(self)

    def SetInternalScore(self, internal_score):
        return _pyidengine.OcrCharVariant_SetInternalScore(self, internal_score)

    def Serialize(self, serializer):
        return _pyidengine.OcrCharVariant_Serialize(self, serializer)

# Register OcrCharVariant in _pyidengine:
_pyidengine.OcrCharVariant_swigregister(OcrCharVariant)
class OcrChar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.OcrChar_swiginit(self, _pyidengine.new_OcrChar(*args))
    __swig_destroy__ = _pyidengine.delete_OcrChar

    def GetVariantsCount(self):
        return _pyidengine.OcrChar_GetVariantsCount(self)

    def GetVariants(self):
        return _pyidengine.OcrChar_GetVariants(self)

    def GetVariant(self, index):
        return _pyidengine.OcrChar_GetVariant(self, index)

    def GetMutableVariant(self, index):
        return _pyidengine.OcrChar_GetMutableVariant(self, index)

    def SetVariant(self, index, v):
        return _pyidengine.OcrChar_SetVariant(self, index, v)

    def Resize(self, size):
        return _pyidengine.OcrChar_Resize(self, size)

    def GetIsHighlighted(self):
        return _pyidengine.OcrChar_GetIsHighlighted(self)

    def SetIsHighlighted(self, is_highlighted):
        return _pyidengine.OcrChar_SetIsHighlighted(self, is_highlighted)

    def GetQuadrangle(self):
        return _pyidengine.OcrChar_GetQuadrangle(self)

    def GetMutableQuadrangle(self):
        return _pyidengine.OcrChar_GetMutableQuadrangle(self)

    def SetQuadrangle(self, quad):
        return _pyidengine.OcrChar_SetQuadrangle(self, quad)

    def SortVariants(self):
        return _pyidengine.OcrChar_SortVariants(self)

    def GetFirstVariant(self):
        return _pyidengine.OcrChar_GetFirstVariant(self)

    def Serialize(self, serializer):
        return _pyidengine.OcrChar_Serialize(self, serializer)

# Register OcrChar in _pyidengine:
_pyidengine.OcrChar_swigregister(OcrChar)
class OcrString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.OcrString_swiginit(self, _pyidengine.new_OcrString(*args))
    __swig_destroy__ = _pyidengine.delete_OcrString

    def GetCharsCount(self):
        return _pyidengine.OcrString_GetCharsCount(self)

    def GetChars(self):
        return _pyidengine.OcrString_GetChars(self)

    def GetChar(self, index):
        return _pyidengine.OcrString_GetChar(self, index)

    def GetMutableChar(self, index):
        return _pyidengine.OcrString_GetMutableChar(self, index)

    def SetChar(self, index, chr):
        return _pyidengine.OcrString_SetChar(self, index, chr)

    def AppendChar(self, chr):
        return _pyidengine.OcrString_AppendChar(self, chr)

    def AppendString(self, str):
        return _pyidengine.OcrString_AppendString(self, str)

    def Resize(self, size):
        return _pyidengine.OcrString_Resize(self, size)

    def GetQuadrangleByIndex(self, idx):
        return _pyidengine.OcrString_GetQuadrangleByIndex(self, idx)

    def GetBestVariantConfidenceByIndex(self, idx):
        return _pyidengine.OcrString_GetBestVariantConfidenceByIndex(self, idx)

    def SortVariants(self):
        return _pyidengine.OcrString_SortVariants(self)

    def GetFirstString(self):
        return _pyidengine.OcrString_GetFirstString(self)

    def UnpackChars(self):
        return _pyidengine.OcrString_UnpackChars(self)

    def RepackChars(self):
        return _pyidengine.OcrString_RepackChars(self)

    def Serialize(self, serializer):
        return _pyidengine.OcrString_Serialize(self, serializer)

# Register OcrString in _pyidengine:
_pyidengine.OcrString_swigregister(OcrString)
class ByteString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_ByteString

    def __init__(self, *args):
        _pyidengine.ByteString_swiginit(self, _pyidengine.new_ByteString(*args))

    def swap(self, other):
        return _pyidengine.ByteString_swap(self, other)

    def GetLength(self):
        return _pyidengine.ByteString_GetLength(self)

    def GetRequiredBase64BufferLength(self):
        return _pyidengine.ByteString_GetRequiredBase64BufferLength(self)

    def CopyBase64ToBuffer(self, out_buffer, buffer_length):
        return _pyidengine.ByteString_CopyBase64ToBuffer(self, out_buffer, buffer_length)

    def GetBase64String(self):
        return _pyidengine.ByteString_GetBase64String(self)

    def GetRequiredHexBufferLength(self):
        return _pyidengine.ByteString_GetRequiredHexBufferLength(self)

    def CopyHexToBuffer(self, out_buffer, buffer_length):
        return _pyidengine.ByteString_CopyHexToBuffer(self, out_buffer, buffer_length)

    def GetHexString(self):
        return _pyidengine.ByteString_GetHexString(self)

# Register ByteString in _pyidengine:
_pyidengine.ByteString_swigregister(ByteString)
class ImagesMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pyidengine.ImagesMapIterator_swiginit(self, _pyidengine.new_ImagesMapIterator(other))
    __swig_destroy__ = _pyidengine.delete_ImagesMapIterator

    def GetKey(self):
        return _pyidengine.ImagesMapIterator_GetKey(self)

    def GetValue(self):
        return _pyidengine.ImagesMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.ImagesMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.ImagesMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.ImagesMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.ImagesMapIterator_Advance(self)

# Register ImagesMapIterator in _pyidengine:
_pyidengine.ImagesMapIterator_swigregister(ImagesMapIterator)
IPF_G = _pyidengine.IPF_G
IPF_GA = _pyidengine.IPF_GA
IPF_AG = _pyidengine.IPF_AG
IPF_RGB = _pyidengine.IPF_RGB
IPF_BGR = _pyidengine.IPF_BGR
IPF_BGRA = _pyidengine.IPF_BGRA
IPF_ARGB = _pyidengine.IPF_ARGB
IPF_RGBA = _pyidengine.IPF_RGBA
YUVTYPE_UNDEFINED = _pyidengine.YUVTYPE_UNDEFINED
YUVTYPE_NV21 = _pyidengine.YUVTYPE_NV21
YUVTYPE_420_888 = _pyidengine.YUVTYPE_420_888
class YUVDimensions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyidengine.YUVDimensions_swiginit(self, _pyidengine.new_YUVDimensions(*args))
    yPlanePixelStride = property(_pyidengine.YUVDimensions_yPlanePixelStride_get, _pyidengine.YUVDimensions_yPlanePixelStride_set)
    yPlaneRowStride = property(_pyidengine.YUVDimensions_yPlaneRowStride_get, _pyidengine.YUVDimensions_yPlaneRowStride_set)
    uPlanePixelStride = property(_pyidengine.YUVDimensions_uPlanePixelStride_get, _pyidengine.YUVDimensions_uPlanePixelStride_set)
    uPlaneRowStride = property(_pyidengine.YUVDimensions_uPlaneRowStride_get, _pyidengine.YUVDimensions_uPlaneRowStride_set)
    vPlanePixelStride = property(_pyidengine.YUVDimensions_vPlanePixelStride_get, _pyidengine.YUVDimensions_vPlanePixelStride_set)
    vPlaneRowStride = property(_pyidengine.YUVDimensions_vPlaneRowStride_get, _pyidengine.YUVDimensions_vPlaneRowStride_set)
    width = property(_pyidengine.YUVDimensions_width_get, _pyidengine.YUVDimensions_width_set)
    height = property(_pyidengine.YUVDimensions_height_get, _pyidengine.YUVDimensions_height_set)
    type = property(_pyidengine.YUVDimensions_type_get, _pyidengine.YUVDimensions_type_set)
    __swig_destroy__ = _pyidengine.delete_YUVDimensions

# Register YUVDimensions in _pyidengine:
_pyidengine.YUVDimensions_swigregister(YUVDimensions)
class Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def GetNumberOfPages(image_filename):
        return _pyidengine.Image_GetNumberOfPages(image_filename)

    @staticmethod
    def GetImagePageName(image_filename, page_number):
        return _pyidengine.Image_GetImagePageName(image_filename, page_number)

    @staticmethod
    def CreateEmpty():
        return _pyidengine.Image_CreateEmpty()

    @staticmethod
    def FromFile(*args):
        return _pyidengine.Image_FromFile(*args)

    @staticmethod
    def FromFileBuffer(*args):
        return _pyidengine.Image_FromFileBuffer(*args)

    @staticmethod
    def FromBuffer(raw_data, width, height, stride, channels):
        return _pyidengine.Image_FromBuffer(raw_data, width, height, stride, channels)

    @staticmethod
    def FromBufferExtended(raw_data, width, height, stride, pixel_format, bytes_per_channel):
        return _pyidengine.Image_FromBufferExtended(raw_data, width, height, stride, pixel_format, bytes_per_channel)

    @staticmethod
    def FromYUVBuffer(yuv_data, width, height):
        return _pyidengine.Image_FromYUVBuffer(yuv_data, width, height)

    @staticmethod
    def FromYUV(y_plane, u_plane, v_plane, dimensions):
        return _pyidengine.Image_FromYUV(y_plane, u_plane, v_plane, dimensions)

    @staticmethod
    def FromBase64Buffer(*args):
        return _pyidengine.Image_FromBase64Buffer(*args)
    __swig_destroy__ = _pyidengine.delete_Image

    def GetNumberOfLayers(self):
        return _pyidengine.Image_GetNumberOfLayers(self)

    def GetLayer(self, name):
        return _pyidengine.Image_GetLayer(self, name)

    def GetLayerPtr(self, name):
        return _pyidengine.Image_GetLayerPtr(self, name)

    def LayersBegin(self):
        return _pyidengine.Image_LayersBegin(self)

    def LayersEnd(self):
        return _pyidengine.Image_LayersEnd(self)

    def HasLayer(self, name):
        return _pyidengine.Image_HasLayer(self, name)

    def HasLayers(self):
        return _pyidengine.Image_HasLayers(self)

    def RemoveLayer(self, name):
        return _pyidengine.Image_RemoveLayer(self, name)

    def RemoveLayers(self):
        return _pyidengine.Image_RemoveLayers(self)

    def SetLayer(self, name, image):
        return _pyidengine.Image_SetLayer(self, name, image)

    def SetLayerWithOwnership(self, name, image):
        return _pyidengine.Image_SetLayerWithOwnership(self, name, image)

    def CloneDeep(self):
        return _pyidengine.Image_CloneDeep(self)

    def CloneShallow(self):
        return _pyidengine.Image_CloneShallow(self)

    def Clear(self):
        return _pyidengine.Image_Clear(self)

    def GetRequiredBufferLength(self):
        return _pyidengine.Image_GetRequiredBufferLength(self)

    def CopyToBuffer(self, buffer):
        return _pyidengine.Image_CopyToBuffer(self, buffer)

    def Save(self, image_filename):
        return _pyidengine.Image_Save(self, image_filename)

    def GetRequiredBase64BufferLength(self):
        return _pyidengine.Image_GetRequiredBase64BufferLength(self)

    def CopyBase64ToBuffer(self, out_buffer, buffer_length):
        return _pyidengine.Image_CopyBase64ToBuffer(self, out_buffer, buffer_length)

    def GetBase64String(self):
        return _pyidengine.Image_GetBase64String(self)

    def EstimateFocusScore(self, quantile=0.95):
        return _pyidengine.Image_EstimateFocusScore(self, quantile)

    def Resize(self, new_size):
        return _pyidengine.Image_Resize(self, new_size)

    def CloneResized(self, new_size):
        return _pyidengine.Image_CloneResized(self, new_size)

    def Crop(self, *args):
        return _pyidengine.Image_Crop(self, *args)

    def CloneCropped(self, *args):
        return _pyidengine.Image_CloneCropped(self, *args)

    def CloneCroppedShallow(self, rect):
        return _pyidengine.Image_CloneCroppedShallow(self, rect)

    def Mask(self, *args):
        return _pyidengine.Image_Mask(self, *args)

    def CloneMasked(self, *args):
        return _pyidengine.Image_CloneMasked(self, *args)

    def Fill(self, *args):
        return _pyidengine.Image_Fill(self, *args)

    def CloneFilled(self, *args):
        return _pyidengine.Image_CloneFilled(self, *args)

    def FlipVertical(self):
        return _pyidengine.Image_FlipVertical(self)

    def CloneFlippedVertical(self):
        return _pyidengine.Image_CloneFlippedVertical(self)

    def FlipHorizontal(self):
        return _pyidengine.Image_FlipHorizontal(self)

    def CloneFlippedHorizontal(self):
        return _pyidengine.Image_CloneFlippedHorizontal(self)

    def Rotate90(self, times):
        return _pyidengine.Image_Rotate90(self, times)

    def CloneRotated90(self, times):
        return _pyidengine.Image_CloneRotated90(self, times)

    def AverageChannels(self):
        return _pyidengine.Image_AverageChannels(self)

    def CloneAveragedChannels(self):
        return _pyidengine.Image_CloneAveragedChannels(self)

    def Invert(self):
        return _pyidengine.Image_Invert(self)

    def CloneInverted(self):
        return _pyidengine.Image_CloneInverted(self)

    def GetWidth(self):
        return _pyidengine.Image_GetWidth(self)

    def GetHeight(self):
        return _pyidengine.Image_GetHeight(self)

    def GetSize(self):
        return _pyidengine.Image_GetSize(self)

    def GetStride(self):
        return _pyidengine.Image_GetStride(self)

    def GetChannels(self):
        return _pyidengine.Image_GetChannels(self)

    def IsMemoryOwner(self):
        return _pyidengine.Image_IsMemoryOwner(self)

    def ForceMemoryOwner(self):
        return _pyidengine.Image_ForceMemoryOwner(self)

    def Serialize(self, serializer):
        return _pyidengine.Image_Serialize(self, serializer)

# Register Image in _pyidengine:
_pyidengine.Image_swigregister(Image)
class StringsVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pyidengine.StringsVectorIterator_swiginit(self, _pyidengine.new_StringsVectorIterator(other))
    __swig_destroy__ = _pyidengine.delete_StringsVectorIterator

    def GetValue(self):
        return _pyidengine.StringsVectorIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.StringsVectorIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.StringsVectorIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.StringsVectorIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.StringsVectorIterator_Advance(self)

# Register StringsVectorIterator in _pyidengine:
_pyidengine.StringsVectorIterator_swigregister(StringsVectorIterator)
class StringsSetIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pyidengine.StringsSetIterator_swiginit(self, _pyidengine.new_StringsSetIterator(other))
    __swig_destroy__ = _pyidengine.delete_StringsSetIterator

    def GetValue(self):
        return _pyidengine.StringsSetIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.StringsSetIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.StringsSetIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.StringsSetIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.StringsSetIterator_Advance(self)

# Register StringsSetIterator in _pyidengine:
_pyidengine.StringsSetIterator_swigregister(StringsSetIterator)
class StringsMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, other):
        _pyidengine.StringsMapIterator_swiginit(self, _pyidengine.new_StringsMapIterator(other))
    __swig_destroy__ = _pyidengine.delete_StringsMapIterator

    def GetKey(self):
        return _pyidengine.StringsMapIterator_GetKey(self)

    def GetValue(self):
        return _pyidengine.StringsMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.StringsMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.StringsMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.StringsMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.StringsMapIterator_Advance(self)

# Register StringsMapIterator in _pyidengine:
_pyidengine.StringsMapIterator_swigregister(StringsMapIterator)
class StringsSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_StringsSet

    def GetStringsCount(self):
        return _pyidengine.StringsSet_GetStringsCount(self)

    def HasString(self, string):
        return _pyidengine.StringsSet_HasString(self, string)

    def StringsBegin(self):
        return _pyidengine.StringsSet_StringsBegin(self)

    def StringsEnd(self):
        return _pyidengine.StringsSet_StringsEnd(self)

# Register StringsSet in _pyidengine:
_pyidengine.StringsSet_swigregister(StringsSet)
IdFieldType_Text = _pyidengine.IdFieldType_Text
IdFieldType_Image = _pyidengine.IdFieldType_Image
IdFieldType_Animated = _pyidengine.IdFieldType_Animated
IdFieldType_Check = _pyidengine.IdFieldType_Check
class IdBaseFieldInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdBaseFieldInfo

    def __init__(self, *args):
        _pyidengine.IdBaseFieldInfo_swiginit(self, _pyidengine.new_IdBaseFieldInfo(*args))

    def GetIsAccepted(self):
        return _pyidengine.IdBaseFieldInfo_GetIsAccepted(self)

    def SetIsAccepted(self, is_accepted):
        return _pyidengine.IdBaseFieldInfo_SetIsAccepted(self, is_accepted)

    def GetConfidence(self):
        return _pyidengine.IdBaseFieldInfo_GetConfidence(self)

    def SetConfidence(self, confidence):
        return _pyidengine.IdBaseFieldInfo_SetConfidence(self, confidence)

    def GetAttributesCount(self):
        return _pyidengine.IdBaseFieldInfo_GetAttributesCount(self)

    def GetAttribute(self, attr_name):
        return _pyidengine.IdBaseFieldInfo_GetAttribute(self, attr_name)

    def HasAttribute(self, attr_name):
        return _pyidengine.IdBaseFieldInfo_HasAttribute(self, attr_name)

    def SetAttribute(self, attr_name, attr_value):
        return _pyidengine.IdBaseFieldInfo_SetAttribute(self, attr_name, attr_value)

    def RemoveAttribute(self, attr_name):
        return _pyidengine.IdBaseFieldInfo_RemoveAttribute(self, attr_name)

    def AttributesBegin(self):
        return _pyidengine.IdBaseFieldInfo_AttributesBegin(self)

    def AttributesEnd(self):
        return _pyidengine.IdBaseFieldInfo_AttributesEnd(self)

# Register IdBaseFieldInfo in _pyidengine:
_pyidengine.IdBaseFieldInfo_swigregister(IdBaseFieldInfo)
class IdTextField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdTextField

    def __init__(self, *args):
        _pyidengine.IdTextField_swiginit(self, _pyidengine.new_IdTextField(*args))

    def GetName(self):
        return _pyidengine.IdTextField_GetName(self)

    def SetName(self, name):
        return _pyidengine.IdTextField_SetName(self, name)

    def GetValue(self):
        return _pyidengine.IdTextField_GetValue(self)

    def SetValue(self, *args):
        return _pyidengine.IdTextField_SetValue(self, *args)

    def GetBaseFieldInfo(self):
        return _pyidengine.IdTextField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pyidengine.IdTextField_GetMutableBaseFieldInfo(self)

# Register IdTextField in _pyidengine:
_pyidengine.IdTextField_swigregister(IdTextField)
class IdTextFieldsMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdTextFieldsMapIterator

    def __init__(self, other):
        _pyidengine.IdTextFieldsMapIterator_swiginit(self, _pyidengine.new_IdTextFieldsMapIterator(other))

    def GetKey(self):
        return _pyidengine.IdTextFieldsMapIterator_GetKey(self)

    def GetValue(self):
        return _pyidengine.IdTextFieldsMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.IdTextFieldsMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.IdTextFieldsMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.IdTextFieldsMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.IdTextFieldsMapIterator_Advance(self)

# Register IdTextFieldsMapIterator in _pyidengine:
_pyidengine.IdTextFieldsMapIterator_swigregister(IdTextFieldsMapIterator)
class IdImageField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdImageField

    def __init__(self, *args):
        _pyidengine.IdImageField_swiginit(self, _pyidengine.new_IdImageField(*args))

    def GetName(self):
        return _pyidengine.IdImageField_GetName(self)

    def SetName(self, name):
        return _pyidengine.IdImageField_SetName(self, name)

    def GetValue(self):
        return _pyidengine.IdImageField_GetValue(self)

    def SetValue(self, value):
        return _pyidengine.IdImageField_SetValue(self, value)

    def GetBaseFieldInfo(self):
        return _pyidengine.IdImageField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pyidengine.IdImageField_GetMutableBaseFieldInfo(self)

# Register IdImageField in _pyidengine:
_pyidengine.IdImageField_swigregister(IdImageField)
class IdImageFieldsMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdImageFieldsMapIterator

    def __init__(self, other):
        _pyidengine.IdImageFieldsMapIterator_swiginit(self, _pyidengine.new_IdImageFieldsMapIterator(other))

    def GetKey(self):
        return _pyidengine.IdImageFieldsMapIterator_GetKey(self)

    def GetValue(self):
        return _pyidengine.IdImageFieldsMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.IdImageFieldsMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.IdImageFieldsMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.IdImageFieldsMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.IdImageFieldsMapIterator_Advance(self)

# Register IdImageFieldsMapIterator in _pyidengine:
_pyidengine.IdImageFieldsMapIterator_swigregister(IdImageFieldsMapIterator)
class IdAnimatedField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdAnimatedField

    def __init__(self, *args):
        _pyidengine.IdAnimatedField_swiginit(self, _pyidengine.new_IdAnimatedField(*args))

    def GetName(self):
        return _pyidengine.IdAnimatedField_GetName(self)

    def SetName(self, name):
        return _pyidengine.IdAnimatedField_SetName(self, name)

    def GetFramesCount(self):
        return _pyidengine.IdAnimatedField_GetFramesCount(self)

    def GetFrame(self, frame_id):
        return _pyidengine.IdAnimatedField_GetFrame(self, frame_id)

    def AppendFrame(self, frame):
        return _pyidengine.IdAnimatedField_AppendFrame(self, frame)

    def ClearFrames(self):
        return _pyidengine.IdAnimatedField_ClearFrames(self)

    def GetBaseFieldInfo(self):
        return _pyidengine.IdAnimatedField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pyidengine.IdAnimatedField_GetMutableBaseFieldInfo(self)

# Register IdAnimatedField in _pyidengine:
_pyidengine.IdAnimatedField_swigregister(IdAnimatedField)
class IdAnimatedFieldsMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdAnimatedFieldsMapIterator

    def __init__(self, other):
        _pyidengine.IdAnimatedFieldsMapIterator_swiginit(self, _pyidengine.new_IdAnimatedFieldsMapIterator(other))

    def GetKey(self):
        return _pyidengine.IdAnimatedFieldsMapIterator_GetKey(self)

    def GetValue(self):
        return _pyidengine.IdAnimatedFieldsMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.IdAnimatedFieldsMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.IdAnimatedFieldsMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.IdAnimatedFieldsMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.IdAnimatedFieldsMapIterator_Advance(self)

# Register IdAnimatedFieldsMapIterator in _pyidengine:
_pyidengine.IdAnimatedFieldsMapIterator_swigregister(IdAnimatedFieldsMapIterator)
IdCheckStatus_Undefined = _pyidengine.IdCheckStatus_Undefined
IdCheckStatus_Passed = _pyidengine.IdCheckStatus_Passed
IdCheckStatus_Failed = _pyidengine.IdCheckStatus_Failed
class IdCheckField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdCheckField

    def __init__(self, *args):
        _pyidengine.IdCheckField_swiginit(self, _pyidengine.new_IdCheckField(*args))

    def GetName(self):
        return _pyidengine.IdCheckField_GetName(self)

    def SetName(self, name):
        return _pyidengine.IdCheckField_SetName(self, name)

    def GetValue(self):
        return _pyidengine.IdCheckField_GetValue(self)

    def SetValue(self, value):
        return _pyidengine.IdCheckField_SetValue(self, value)

    def GetBaseFieldInfo(self):
        return _pyidengine.IdCheckField_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pyidengine.IdCheckField_GetMutableBaseFieldInfo(self)

# Register IdCheckField in _pyidengine:
_pyidengine.IdCheckField_swigregister(IdCheckField)
class IdCheckFieldsMapIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdCheckFieldsMapIterator

    def __init__(self, other):
        _pyidengine.IdCheckFieldsMapIterator_swiginit(self, _pyidengine.new_IdCheckFieldsMapIterator(other))

    def GetKey(self):
        return _pyidengine.IdCheckFieldsMapIterator_GetKey(self)

    def GetValue(self):
        return _pyidengine.IdCheckFieldsMapIterator_GetValue(self)

    def Equals(self, rvalue):
        return _pyidengine.IdCheckFieldsMapIterator_Equals(self, rvalue)

    def __eq__(self, rvalue):
        return _pyidengine.IdCheckFieldsMapIterator___eq__(self, rvalue)

    def __ne__(self, rvalue):
        return _pyidengine.IdCheckFieldsMapIterator___ne__(self, rvalue)

    def Advance(self):
        return _pyidengine.IdCheckFieldsMapIterator_Advance(self)

# Register IdCheckFieldsMapIterator in _pyidengine:
_pyidengine.IdCheckFieldsMapIterator_swigregister(IdCheckFieldsMapIterator)
class IdDocumentInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdDocumentInfo

    def GetDocumentName(self):
        return _pyidengine.IdDocumentInfo_GetDocumentName(self)

    def GetDocumentDescription(self):
        return _pyidengine.IdDocumentInfo_GetDocumentDescription(self)

    def HasRFID(self):
        return _pyidengine.IdDocumentInfo_HasRFID(self)

    def SupportedRFID(self):
        return _pyidengine.IdDocumentInfo_SupportedRFID(self)

    def GetPradoLinks(self):
        return _pyidengine.IdDocumentInfo_GetPradoLinks(self)

    def GetDocumentTemplates(self):
        return _pyidengine.IdDocumentInfo_GetDocumentTemplates(self)

    def GetDocumentFieldsRejectionThreshold(self, field_name):
        return _pyidengine.IdDocumentInfo_GetDocumentFieldsRejectionThreshold(self, field_name)

# Register IdDocumentInfo in _pyidengine:
_pyidengine.IdDocumentInfo_swigregister(IdDocumentInfo)
class IdFaceFeedback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFaceFeedback

    def MessageReceived(self, message):
        return _pyidengine.IdFaceFeedback_MessageReceived(self, message)

# Register IdFaceFeedback in _pyidengine:
_pyidengine.IdFaceFeedback_swigregister(IdFaceFeedback)
IdFaceStatus_NotUsed = _pyidengine.IdFaceStatus_NotUsed
IdFaceStatus_Success = _pyidengine.IdFaceStatus_Success
IdFaceStatus_A_FaceNotFound = _pyidengine.IdFaceStatus_A_FaceNotFound
IdFaceStatus_B_FaceNotFound = _pyidengine.IdFaceStatus_B_FaceNotFound
IdFaceStatus_FaceNotFound = _pyidengine.IdFaceStatus_FaceNotFound
IdFaceStatus_NoAccumulatedResult = _pyidengine.IdFaceStatus_NoAccumulatedResult
class IdFaceLivenessResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFaceLivenessResult

    def __init__(self, *args):
        _pyidengine.IdFaceLivenessResult_swiginit(self, _pyidengine.new_IdFaceLivenessResult(*args))

    def GetLivenessEstimation(self):
        return _pyidengine.IdFaceLivenessResult_GetLivenessEstimation(self)

    def SetLivenessEstimation(self, liveness_estimation):
        return _pyidengine.IdFaceLivenessResult_SetLivenessEstimation(self, liveness_estimation)

    def GetLivenessInstruction(self):
        return _pyidengine.IdFaceLivenessResult_GetLivenessInstruction(self)

    def SetLivenessInstruction(self, instruction):
        return _pyidengine.IdFaceLivenessResult_SetLivenessInstruction(self, instruction)

# Register IdFaceLivenessResult in _pyidengine:
_pyidengine.IdFaceLivenessResult_swigregister(IdFaceLivenessResult)
class IdFaceSimilarityResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFaceSimilarityResult

    def __init__(self, *args):
        _pyidengine.IdFaceSimilarityResult_swiginit(self, _pyidengine.new_IdFaceSimilarityResult(*args))

    def GetSimilarityEstimation(self):
        return _pyidengine.IdFaceSimilarityResult_GetSimilarityEstimation(self)

    def SetSimilarityEstimation(self, similarity_estimation):
        return _pyidengine.IdFaceSimilarityResult_SetSimilarityEstimation(self, similarity_estimation)

    def GetStatus(self):
        return _pyidengine.IdFaceSimilarityResult_GetStatus(self)

    def SetStatus(self, status):
        return _pyidengine.IdFaceSimilarityResult_SetStatus(self, status)

# Register IdFaceSimilarityResult in _pyidengine:
_pyidengine.IdFaceSimilarityResult_swigregister(IdFaceSimilarityResult)
class IdFaceRectsResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFaceRectsResult

    def __init__(self, *args):
        _pyidengine.IdFaceRectsResult_swiginit(self, _pyidengine.new_IdFaceRectsResult(*args))

    def AddFaceRect(self, inp_rect):
        return _pyidengine.IdFaceRectsResult_AddFaceRect(self, inp_rect)

    def Clear(self):
        return _pyidengine.IdFaceRectsResult_Clear(self)

    def Size(self):
        return _pyidengine.IdFaceRectsResult_Size(self)

    def RectanglesBegin(self):
        return _pyidengine.IdFaceRectsResult_RectanglesBegin(self)

    def RectanglesEnd(self):
        return _pyidengine.IdFaceRectsResult_RectanglesEnd(self)

# Register IdFaceRectsResult in _pyidengine:
_pyidengine.IdFaceRectsResult_swigregister(IdFaceRectsResult)
class IdFaceSession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFaceSession

    def GetActivationRequest(self):
        return _pyidengine.IdFaceSession_GetActivationRequest(self)

    def Activate(self, activation_response):
        return _pyidengine.IdFaceSession_Activate(self, activation_response)

    def IsActivated(self):
        return _pyidengine.IdFaceSession_IsActivated(self)

    def GetSimilarity(self, face_image_a, face_image_b):
        return _pyidengine.IdFaceSession_GetSimilarity(self, face_image_a, face_image_b)

    def AddFaceImage(self, face_image):
        return _pyidengine.IdFaceSession_AddFaceImage(self, face_image)

    def GetRects(self, image):
        return _pyidengine.IdFaceSession_GetRects(self, image)

    def HasAccumulatedImage(self):
        return _pyidengine.IdFaceSession_HasAccumulatedImage(self)

    def GetSimilarityWith(self, compare_image):
        return _pyidengine.IdFaceSession_GetSimilarityWith(self, compare_image)

    def GetLivenessResult(self):
        return _pyidengine.IdFaceSession_GetLivenessResult(self)

    def Reset(self):
        return _pyidengine.IdFaceSession_Reset(self)

# Register IdFaceSession in _pyidengine:
_pyidengine.IdFaceSession_swigregister(IdFaceSession)
class IdFaceSessionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFaceSessionSettings

    def Clone(self):
        return _pyidengine.IdFaceSessionSettings_Clone(self)

    def GetOptionsCount(self):
        return _pyidengine.IdFaceSessionSettings_GetOptionsCount(self)

    def GetOption(self, option_name):
        return _pyidengine.IdFaceSessionSettings_GetOption(self, option_name)

    def HasOption(self, option_name):
        return _pyidengine.IdFaceSessionSettings_HasOption(self, option_name)

    def SetOption(self, option_name, option_value):
        return _pyidengine.IdFaceSessionSettings_SetOption(self, option_name, option_value)

    def RemoveOption(self, option_name):
        return _pyidengine.IdFaceSessionSettings_RemoveOption(self, option_name)

    def OptionsBegin(self):
        return _pyidengine.IdFaceSessionSettings_OptionsBegin(self)

    def OptionsEnd(self):
        return _pyidengine.IdFaceSessionSettings_OptionsEnd(self)

    def GetSupportedLivenessInstructionsCount(self):
        return _pyidengine.IdFaceSessionSettings_GetSupportedLivenessInstructionsCount(self)

    def HasSupportedLivenessInstruction(self, instruction):
        return _pyidengine.IdFaceSessionSettings_HasSupportedLivenessInstruction(self, instruction)

    def GetLivenessInstructionDescription(self, instruction):
        return _pyidengine.IdFaceSessionSettings_GetLivenessInstructionDescription(self, instruction)

    def SupportedLivenessInstructionsBegin(self):
        return _pyidengine.IdFaceSessionSettings_SupportedLivenessInstructionsBegin(self)

    def SupportedLivenessInstructionsEnd(self):
        return _pyidengine.IdFaceSessionSettings_SupportedLivenessInstructionsEnd(self)

# Register IdFaceSessionSettings in _pyidengine:
_pyidengine.IdFaceSessionSettings_swigregister(IdFaceSessionSettings)
class IdFieldProcessingSession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFieldProcessingSession

    def GetActivationRequest(self):
        return _pyidengine.IdFieldProcessingSession_GetActivationRequest(self)

    def Activate(self, activation_response):
        return _pyidengine.IdFieldProcessingSession_Activate(self, activation_response)

    def IsActivated(self):
        return _pyidengine.IdFieldProcessingSession_IsActivated(self)

    def Process(self):
        return _pyidengine.IdFieldProcessingSession_Process(self)

    def GetTextFieldsCount(self):
        return _pyidengine.IdFieldProcessingSession_GetTextFieldsCount(self)

    def HasTextField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_HasTextField(self, field_name)

    def GetTextField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_GetTextField(self, field_name)

    def SetTextField(self, field_name, field):
        return _pyidengine.IdFieldProcessingSession_SetTextField(self, field_name, field)

    def RemoveTextField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_RemoveTextField(self, field_name)

    def TextFieldsBegin(self):
        return _pyidengine.IdFieldProcessingSession_TextFieldsBegin(self)

    def TextFieldsEnd(self):
        return _pyidengine.IdFieldProcessingSession_TextFieldsEnd(self)

    def GetImageFieldsCount(self):
        return _pyidengine.IdFieldProcessingSession_GetImageFieldsCount(self)

    def HasImageField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_HasImageField(self, field_name)

    def GetImageField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_GetImageField(self, field_name)

    def SetImageField(self, field_name, field):
        return _pyidengine.IdFieldProcessingSession_SetImageField(self, field_name, field)

    def RemoveImageField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_RemoveImageField(self, field_name)

    def ImageFieldsBegin(self):
        return _pyidengine.IdFieldProcessingSession_ImageFieldsBegin(self)

    def ImageFieldsEnd(self):
        return _pyidengine.IdFieldProcessingSession_ImageFieldsEnd(self)

    def GetAnimatedFieldsCount(self):
        return _pyidengine.IdFieldProcessingSession_GetAnimatedFieldsCount(self)

    def HasAnimatedField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_HasAnimatedField(self, field_name)

    def GetAnimatedField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_GetAnimatedField(self, field_name)

    def SetAnimatedField(self, field_name, field):
        return _pyidengine.IdFieldProcessingSession_SetAnimatedField(self, field_name, field)

    def RemoveAnimatedField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_RemoveAnimatedField(self, field_name)

    def AnimatedFieldsBegin(self):
        return _pyidengine.IdFieldProcessingSession_AnimatedFieldsBegin(self)

    def AnimatedFieldsEnd(self):
        return _pyidengine.IdFieldProcessingSession_AnimatedFieldsEnd(self)

    def GetCheckFieldsCount(self):
        return _pyidengine.IdFieldProcessingSession_GetCheckFieldsCount(self)

    def HasCheckField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_HasCheckField(self, field_name)

    def GetCheckField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_GetCheckField(self, field_name)

    def SetCheckField(self, field_name, field):
        return _pyidengine.IdFieldProcessingSession_SetCheckField(self, field_name, field)

    def RemoveCheckField(self, field_name):
        return _pyidengine.IdFieldProcessingSession_RemoveCheckField(self, field_name)

    def CheckFieldsBegin(self):
        return _pyidengine.IdFieldProcessingSession_CheckFieldsBegin(self)

    def CheckFieldsEnd(self):
        return _pyidengine.IdFieldProcessingSession_CheckFieldsEnd(self)

    def Reset(self):
        return _pyidengine.IdFieldProcessingSession_Reset(self)

# Register IdFieldProcessingSession in _pyidengine:
_pyidengine.IdFieldProcessingSession_swigregister(IdFieldProcessingSession)
class IdFieldProcessingSessionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFieldProcessingSessionSettings

    def Clone(self):
        return _pyidengine.IdFieldProcessingSessionSettings_Clone(self)

    def GetSupportedFieldProcessorsCount(self):
        return _pyidengine.IdFieldProcessingSessionSettings_GetSupportedFieldProcessorsCount(self)

    def HasSupportedFieldProcessor(self, field_processor_name):
        return _pyidengine.IdFieldProcessingSessionSettings_HasSupportedFieldProcessor(self, field_processor_name)

    def SupportedFieldProcessorsBegin(self):
        return _pyidengine.IdFieldProcessingSessionSettings_SupportedFieldProcessorsBegin(self)

    def SupportedFieldProcessorsEnd(self):
        return _pyidengine.IdFieldProcessingSessionSettings_SupportedFieldProcessorsEnd(self)

    def GetCurrentFieldProcessor(self):
        return _pyidengine.IdFieldProcessingSessionSettings_GetCurrentFieldProcessor(self)

    def SetCurrentFieldProcessor(self, field_processor_name):
        return _pyidengine.IdFieldProcessingSessionSettings_SetCurrentFieldProcessor(self, field_processor_name)

    def GetOptionsCount(self):
        return _pyidengine.IdFieldProcessingSessionSettings_GetOptionsCount(self)

    def GetOption(self, option_name):
        return _pyidengine.IdFieldProcessingSessionSettings_GetOption(self, option_name)

    def HasOption(self, option_name):
        return _pyidengine.IdFieldProcessingSessionSettings_HasOption(self, option_name)

    def SetOption(self, option_name, option_value):
        return _pyidengine.IdFieldProcessingSessionSettings_SetOption(self, option_name, option_value)

    def RemoveOption(self, option_name):
        return _pyidengine.IdFieldProcessingSessionSettings_RemoveOption(self, option_name)

    def OptionsBegin(self):
        return _pyidengine.IdFieldProcessingSessionSettings_OptionsBegin(self)

    def OptionsEnd(self):
        return _pyidengine.IdFieldProcessingSessionSettings_OptionsEnd(self)

# Register IdFieldProcessingSessionSettings in _pyidengine:
_pyidengine.IdFieldProcessingSessionSettings_swigregister(IdFieldProcessingSessionSettings)
class IdTemplateDetectionResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdTemplateDetectionResult

    def __init__(self, *args):
        _pyidengine.IdTemplateDetectionResult_swiginit(self, _pyidengine.new_IdTemplateDetectionResult(*args))

    def GetTemplateName(self):
        return _pyidengine.IdTemplateDetectionResult_GetTemplateName(self)

    def SetTemplateName(self, name):
        return _pyidengine.IdTemplateDetectionResult_SetTemplateName(self, name)

    def GetQuadrangle(self):
        return _pyidengine.IdTemplateDetectionResult_GetQuadrangle(self)

    def SetQuadrangle(self, quadrangle):
        return _pyidengine.IdTemplateDetectionResult_SetQuadrangle(self, quadrangle)

    def GetIsAccepted(self):
        return _pyidengine.IdTemplateDetectionResult_GetIsAccepted(self)

    def SetIsAccepted(self, is_accepted):
        return _pyidengine.IdTemplateDetectionResult_SetIsAccepted(self, is_accepted)

    def GetConfidence(self):
        return _pyidengine.IdTemplateDetectionResult_GetConfidence(self)

    def SetConfidence(self, confidence):
        return _pyidengine.IdTemplateDetectionResult_SetConfidence(self, confidence)

    def GetStandardSize(self):
        return _pyidengine.IdTemplateDetectionResult_GetStandardSize(self)

    def SetStandardSize(self, standard_size):
        return _pyidengine.IdTemplateDetectionResult_SetStandardSize(self, standard_size)

    def GetAttributesCount(self):
        return _pyidengine.IdTemplateDetectionResult_GetAttributesCount(self)

    def GetAttribute(self, attr_name):
        return _pyidengine.IdTemplateDetectionResult_GetAttribute(self, attr_name)

    def HasAttribute(self, attr_name):
        return _pyidengine.IdTemplateDetectionResult_HasAttribute(self, attr_name)

    def SetAttribute(self, attr_name, attr_value):
        return _pyidengine.IdTemplateDetectionResult_SetAttribute(self, attr_name, attr_value)

    def RemoveAttribute(self, attr_name):
        return _pyidengine.IdTemplateDetectionResult_RemoveAttribute(self, attr_name)

    def AttributesBegin(self):
        return _pyidengine.IdTemplateDetectionResult_AttributesBegin(self)

    def AttributesEnd(self):
        return _pyidengine.IdTemplateDetectionResult_AttributesEnd(self)

# Register IdTemplateDetectionResult in _pyidengine:
_pyidengine.IdTemplateDetectionResult_swigregister(IdTemplateDetectionResult)
class IdTemplateSegmentationResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdTemplateSegmentationResult

    def __init__(self, *args):
        _pyidengine.IdTemplateSegmentationResult_swiginit(self, _pyidengine.new_IdTemplateSegmentationResult(*args))

    def GetIsAccepted(self):
        return _pyidengine.IdTemplateSegmentationResult_GetIsAccepted(self)

    def SetIsAccepted(self, is_accepted):
        return _pyidengine.IdTemplateSegmentationResult_SetIsAccepted(self, is_accepted)

    def GetConfidence(self):
        return _pyidengine.IdTemplateSegmentationResult_GetConfidence(self)

    def SetConfidence(self, confidence):
        return _pyidengine.IdTemplateSegmentationResult_SetConfidence(self, confidence)

    def GetRawFieldsCount(self):
        return _pyidengine.IdTemplateSegmentationResult_GetRawFieldsCount(self)

    def HasRawField(self, raw_field_name):
        return _pyidengine.IdTemplateSegmentationResult_HasRawField(self, raw_field_name)

    def GetRawFieldQuadrangle(self, raw_field_name):
        return _pyidengine.IdTemplateSegmentationResult_GetRawFieldQuadrangle(self, raw_field_name)

    def GetRawFieldTemplateQuadrangle(self, raw_field_name):
        return _pyidengine.IdTemplateSegmentationResult_GetRawFieldTemplateQuadrangle(self, raw_field_name)

    def SetRawFieldQuadrangles(self, raw_field_name, quadrangle, template_quadrangle):
        return _pyidengine.IdTemplateSegmentationResult_SetRawFieldQuadrangles(self, raw_field_name, quadrangle, template_quadrangle)

    def RemoveRawField(self, raw_field_name):
        return _pyidengine.IdTemplateSegmentationResult_RemoveRawField(self, raw_field_name)

    def RawFieldQuadranglesBegin(self):
        return _pyidengine.IdTemplateSegmentationResult_RawFieldQuadranglesBegin(self)

    def RawFieldQuadranglesEnd(self):
        return _pyidengine.IdTemplateSegmentationResult_RawFieldQuadranglesEnd(self)

    def RawFieldTemplateQuadranglesBegin(self):
        return _pyidengine.IdTemplateSegmentationResult_RawFieldTemplateQuadranglesBegin(self)

    def RawFieldTemplateQuadranglesEnd(self):
        return _pyidengine.IdTemplateSegmentationResult_RawFieldTemplateQuadranglesEnd(self)

# Register IdTemplateSegmentationResult in _pyidengine:
_pyidengine.IdTemplateSegmentationResult_swigregister(IdTemplateSegmentationResult)
class IdResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdResult

    def __init__(self, *args):
        _pyidengine.IdResult_swiginit(self, _pyidengine.new_IdResult(*args))

    def GetDocumentType(self):
        return _pyidengine.IdResult_GetDocumentType(self)

    def SetDocumentType(self, document_type):
        return _pyidengine.IdResult_SetDocumentType(self, document_type)

    def GetTemplateDetectionResultsCount(self):
        return _pyidengine.IdResult_GetTemplateDetectionResultsCount(self)

    def GetTemplateDetectionResult(self, result_id):
        return _pyidengine.IdResult_GetTemplateDetectionResult(self, result_id)

    def AppendTemplateDetectionResult(self, result):
        return _pyidengine.IdResult_AppendTemplateDetectionResult(self, result)

    def ClearTemplateDetectionResults(self):
        return _pyidengine.IdResult_ClearTemplateDetectionResults(self)

    def GetTemplateSegmentationResultsCount(self):
        return _pyidengine.IdResult_GetTemplateSegmentationResultsCount(self)

    def GetTemplateSegmentationResult(self, result_id):
        return _pyidengine.IdResult_GetTemplateSegmentationResult(self, result_id)

    def AppendTemplateSegmentationResult(self, result):
        return _pyidengine.IdResult_AppendTemplateSegmentationResult(self, result)

    def ClearTemplateSegmentationResults(self):
        return _pyidengine.IdResult_ClearTemplateSegmentationResults(self)

    def GetIsTerminal(self):
        return _pyidengine.IdResult_GetIsTerminal(self)

    def SetIsTerminal(self, is_terminal):
        return _pyidengine.IdResult_SetIsTerminal(self, is_terminal)

    def GetSeenTemplates(self):
        return _pyidengine.IdResult_GetSeenTemplates(self)

    def GetTerminalTemplates(self):
        return _pyidengine.IdResult_GetTerminalTemplates(self)

    def GetTextFieldsCount(self):
        return _pyidengine.IdResult_GetTextFieldsCount(self)

    def HasTextField(self, field_name):
        return _pyidengine.IdResult_HasTextField(self, field_name)

    def GetTextField(self, field_name):
        return _pyidengine.IdResult_GetTextField(self, field_name)

    def SetTextField(self, field_name, field):
        return _pyidengine.IdResult_SetTextField(self, field_name, field)

    def RemoveTextField(self, field_name):
        return _pyidengine.IdResult_RemoveTextField(self, field_name)

    def TextFieldsBegin(self):
        return _pyidengine.IdResult_TextFieldsBegin(self)

    def TextFieldsEnd(self):
        return _pyidengine.IdResult_TextFieldsEnd(self)

    def GetImageFieldsCount(self):
        return _pyidengine.IdResult_GetImageFieldsCount(self)

    def HasImageField(self, field_name):
        return _pyidengine.IdResult_HasImageField(self, field_name)

    def GetImageField(self, field_name):
        return _pyidengine.IdResult_GetImageField(self, field_name)

    def SetImageField(self, field_name, field):
        return _pyidengine.IdResult_SetImageField(self, field_name, field)

    def RemoveImageField(self, field_name):
        return _pyidengine.IdResult_RemoveImageField(self, field_name)

    def ImageFieldsBegin(self):
        return _pyidengine.IdResult_ImageFieldsBegin(self)

    def ImageFieldsEnd(self):
        return _pyidengine.IdResult_ImageFieldsEnd(self)

    def GetAnimatedFieldsCount(self):
        return _pyidengine.IdResult_GetAnimatedFieldsCount(self)

    def HasAnimatedField(self, field_name):
        return _pyidengine.IdResult_HasAnimatedField(self, field_name)

    def GetAnimatedField(self, field_name):
        return _pyidengine.IdResult_GetAnimatedField(self, field_name)

    def SetAnimatedField(self, field_name, field):
        return _pyidengine.IdResult_SetAnimatedField(self, field_name, field)

    def RemoveAnimatedField(self, field_name):
        return _pyidengine.IdResult_RemoveAnimatedField(self, field_name)

    def AnimatedFieldsBegin(self):
        return _pyidengine.IdResult_AnimatedFieldsBegin(self)

    def AnimatedFieldsEnd(self):
        return _pyidengine.IdResult_AnimatedFieldsEnd(self)

    def GetCheckFieldsCount(self):
        return _pyidengine.IdResult_GetCheckFieldsCount(self)

    def HasCheckField(self, field_name):
        return _pyidengine.IdResult_HasCheckField(self, field_name)

    def GetCheckField(self, field_name):
        return _pyidengine.IdResult_GetCheckField(self, field_name)

    def SetCheckField(self, field_name, field):
        return _pyidengine.IdResult_SetCheckField(self, field_name, field)

    def RemoveCheckField(self, field_name):
        return _pyidengine.IdResult_RemoveCheckField(self, field_name)

    def CheckFieldsBegin(self):
        return _pyidengine.IdResult_CheckFieldsBegin(self)

    def CheckFieldsEnd(self):
        return _pyidengine.IdResult_CheckFieldsEnd(self)

    def GetForensicTextFieldsCount(self):
        return _pyidengine.IdResult_GetForensicTextFieldsCount(self)

    def HasForensicTextField(self, field_name):
        return _pyidengine.IdResult_HasForensicTextField(self, field_name)

    def GetForensicTextField(self, field_name):
        return _pyidengine.IdResult_GetForensicTextField(self, field_name)

    def SetForensicTextField(self, field_name, field):
        return _pyidengine.IdResult_SetForensicTextField(self, field_name, field)

    def RemoveForensicTextField(self, field_name):
        return _pyidengine.IdResult_RemoveForensicTextField(self, field_name)

    def ForensicTextFieldsBegin(self):
        return _pyidengine.IdResult_ForensicTextFieldsBegin(self)

    def ForensicTextFieldsEnd(self):
        return _pyidengine.IdResult_ForensicTextFieldsEnd(self)

    def GetForensicImageFieldsCount(self):
        return _pyidengine.IdResult_GetForensicImageFieldsCount(self)

    def HasForensicImageField(self, field_name):
        return _pyidengine.IdResult_HasForensicImageField(self, field_name)

    def GetForensicImageField(self, field_name):
        return _pyidengine.IdResult_GetForensicImageField(self, field_name)

    def SetForensicImageField(self, field_name, field):
        return _pyidengine.IdResult_SetForensicImageField(self, field_name, field)

    def RemoveForensicImageField(self, field_name):
        return _pyidengine.IdResult_RemoveForensicImageField(self, field_name)

    def ForensicImageFieldsBegin(self):
        return _pyidengine.IdResult_ForensicImageFieldsBegin(self)

    def ForensicImageFieldsEnd(self):
        return _pyidengine.IdResult_ForensicImageFieldsEnd(self)

    def GetForensicAnimatedFieldsCount(self):
        return _pyidengine.IdResult_GetForensicAnimatedFieldsCount(self)

    def HasForensicAnimatedField(self, field_name):
        return _pyidengine.IdResult_HasForensicAnimatedField(self, field_name)

    def GetForensicAnimatedField(self, field_name):
        return _pyidengine.IdResult_GetForensicAnimatedField(self, field_name)

    def SetForensicAnimatedField(self, field_name, field):
        return _pyidengine.IdResult_SetForensicAnimatedField(self, field_name, field)

    def RemoveForensicAnimatedField(self, field_name):
        return _pyidengine.IdResult_RemoveForensicAnimatedField(self, field_name)

    def ForensicAnimatedFieldsBegin(self):
        return _pyidengine.IdResult_ForensicAnimatedFieldsBegin(self)

    def ForensicAnimatedFieldsEnd(self):
        return _pyidengine.IdResult_ForensicAnimatedFieldsEnd(self)

    def GetForensicCheckFieldsCount(self):
        return _pyidengine.IdResult_GetForensicCheckFieldsCount(self)

    def HasForensicCheckField(self, field_name):
        return _pyidengine.IdResult_HasForensicCheckField(self, field_name)

    def GetForensicCheckField(self, field_name):
        return _pyidengine.IdResult_GetForensicCheckField(self, field_name)

    def SetForensicCheckField(self, field_name, field):
        return _pyidengine.IdResult_SetForensicCheckField(self, field_name, field)

    def RemoveForensicCheckField(self, field_name):
        return _pyidengine.IdResult_RemoveForensicCheckField(self, field_name)

    def ForensicCheckFieldsBegin(self):
        return _pyidengine.IdResult_ForensicCheckFieldsBegin(self)

    def ForensicCheckFieldsEnd(self):
        return _pyidengine.IdResult_ForensicCheckFieldsEnd(self)

    def GetRawTextFieldsCount(self):
        return _pyidengine.IdResult_GetRawTextFieldsCount(self)

    def HasRawTextField(self, field_name):
        return _pyidengine.IdResult_HasRawTextField(self, field_name)

    def GetRawTextField(self, field_name):
        return _pyidengine.IdResult_GetRawTextField(self, field_name)

    def SetRawTextField(self, field_name, field):
        return _pyidengine.IdResult_SetRawTextField(self, field_name, field)

    def RemoveRawTextField(self, field_name):
        return _pyidengine.IdResult_RemoveRawTextField(self, field_name)

    def RawTextFieldsBegin(self):
        return _pyidengine.IdResult_RawTextFieldsBegin(self)

    def RawTextFieldsEnd(self):
        return _pyidengine.IdResult_RawTextFieldsEnd(self)

    def GetRawImageFieldsCount(self):
        return _pyidengine.IdResult_GetRawImageFieldsCount(self)

    def HasRawImageField(self, field_name):
        return _pyidengine.IdResult_HasRawImageField(self, field_name)

    def GetRawImageField(self, field_name):
        return _pyidengine.IdResult_GetRawImageField(self, field_name)

    def SetRawImageField(self, field_name, field):
        return _pyidengine.IdResult_SetRawImageField(self, field_name, field)

    def RemoveRawImageField(self, field_name):
        return _pyidengine.IdResult_RemoveRawImageField(self, field_name)

    def RawImageFieldsBegin(self):
        return _pyidengine.IdResult_RawImageFieldsBegin(self)

    def RawImageFieldsEnd(self):
        return _pyidengine.IdResult_RawImageFieldsEnd(self)

    def GetCorrespondingRawFieldsCount(self, field_name):
        return _pyidengine.IdResult_GetCorrespondingRawFieldsCount(self, field_name)

    def HasCorrespondingRawField(self, field_name, raw_field_name):
        return _pyidengine.IdResult_HasCorrespondingRawField(self, field_name, raw_field_name)

    def CorrespondingRawFieldNamesBegin(self, field_name):
        return _pyidengine.IdResult_CorrespondingRawFieldNamesBegin(self, field_name)

    def CorrespondingRawFieldNamesEnd(self, field_name):
        return _pyidengine.IdResult_CorrespondingRawFieldNamesEnd(self, field_name)

    def GetCorrespondingFieldsCount(self, raw_field_name):
        return _pyidengine.IdResult_GetCorrespondingFieldsCount(self, raw_field_name)

    def HasCorrespondingField(self, raw_field_name, field_name):
        return _pyidengine.IdResult_HasCorrespondingField(self, raw_field_name, field_name)

    def CorrespondingFieldNamesBegin(self, raw_field_name):
        return _pyidengine.IdResult_CorrespondingFieldNamesBegin(self, raw_field_name)

    def CorrespondingFieldNamesEnd(self, raw_field_name):
        return _pyidengine.IdResult_CorrespondingFieldNamesEnd(self, raw_field_name)

# Register IdResult in _pyidengine:
_pyidengine.IdResult_swigregister(IdResult)
class IdFeedbackContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFeedbackContainer

    def __init__(self, *args):
        _pyidengine.IdFeedbackContainer_swiginit(self, _pyidengine.new_IdFeedbackContainer(*args))

    def GetQuadranglesCount(self):
        return _pyidengine.IdFeedbackContainer_GetQuadranglesCount(self)

    def HasQuadrangle(self, quad_name):
        return _pyidengine.IdFeedbackContainer_HasQuadrangle(self, quad_name)

    def GetQuadrangle(self, quad_name):
        return _pyidengine.IdFeedbackContainer_GetQuadrangle(self, quad_name)

    def SetQuadrangle(self, quad_name, quad):
        return _pyidengine.IdFeedbackContainer_SetQuadrangle(self, quad_name, quad)

    def RemoveQuadrangle(self, quad_name):
        return _pyidengine.IdFeedbackContainer_RemoveQuadrangle(self, quad_name)

    def QuadranglesBegin(self):
        return _pyidengine.IdFeedbackContainer_QuadranglesBegin(self)

    def QuadranglesEnd(self):
        return _pyidengine.IdFeedbackContainer_QuadranglesEnd(self)

# Register IdFeedbackContainer in _pyidengine:
_pyidengine.IdFeedbackContainer_swigregister(IdFeedbackContainer)
class IdFeedback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFeedback

    def FeedbackReceived(self, feedback_container):
        return _pyidengine.IdFeedback_FeedbackReceived(self, feedback_container)

    def TemplateDetectionResultReceived(self, detection_result):
        return _pyidengine.IdFeedback_TemplateDetectionResultReceived(self, detection_result)

    def TemplateSegmentationResultReceived(self, segmentation_result):
        return _pyidengine.IdFeedback_TemplateSegmentationResultReceived(self, segmentation_result)

    def ResultReceived(self, result_received):
        return _pyidengine.IdFeedback_ResultReceived(self, result_received)

    def SessionEnded(self):
        return _pyidengine.IdFeedback_SessionEnded(self)

# Register IdFeedback in _pyidengine:
_pyidengine.IdFeedback_swigregister(IdFeedback)
class IdFileAnalysisSession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFileAnalysisSession

    def GetActivationRequest(self):
        return _pyidengine.IdFileAnalysisSession_GetActivationRequest(self)

    def Activate(self, activation_response):
        return _pyidengine.IdFileAnalysisSession_Activate(self, activation_response)

    def IsActivated(self):
        return _pyidengine.IdFileAnalysisSession_IsActivated(self)

    def Process(self, image):
        return _pyidengine.IdFileAnalysisSession_Process(self, image)

    def GetCurrentResult(self):
        return _pyidengine.IdFileAnalysisSession_GetCurrentResult(self)

    def Reset(self):
        return _pyidengine.IdFileAnalysisSession_Reset(self)

# Register IdFileAnalysisSession in _pyidengine:
_pyidengine.IdFileAnalysisSession_swigregister(IdFileAnalysisSession)
class IdFileAnalysisSessionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdFileAnalysisSessionSettings

    def Clone(self):
        return _pyidengine.IdFileAnalysisSessionSettings_Clone(self)

    def GetOptionsCount(self):
        return _pyidengine.IdFileAnalysisSessionSettings_GetOptionsCount(self)

    def GetOption(self, option_name):
        return _pyidengine.IdFileAnalysisSessionSettings_GetOption(self, option_name)

    def HasOption(self, option_name):
        return _pyidengine.IdFileAnalysisSessionSettings_HasOption(self, option_name)

    def SetOption(self, option_name, option_value):
        return _pyidengine.IdFileAnalysisSessionSettings_SetOption(self, option_name, option_value)

    def RemoveOption(self, option_name):
        return _pyidengine.IdFileAnalysisSessionSettings_RemoveOption(self, option_name)

    def OptionsBegin(self):
        return _pyidengine.IdFileAnalysisSessionSettings_OptionsBegin(self)

    def OptionsEnd(self):
        return _pyidengine.IdFileAnalysisSessionSettings_OptionsEnd(self)

    def GetSupportedForensicFieldsCount(self):
        return _pyidengine.IdFileAnalysisSessionSettings_GetSupportedForensicFieldsCount(self)

    def HasSupportedForensicField(self, field_name):
        return _pyidengine.IdFileAnalysisSessionSettings_HasSupportedForensicField(self, field_name)

    def SupportedForensicFieldsBegin(self):
        return _pyidengine.IdFileAnalysisSessionSettings_SupportedForensicFieldsBegin(self)

    def SupportedForensicFieldsEnd(self):
        return _pyidengine.IdFileAnalysisSessionSettings_SupportedForensicFieldsEnd(self)

    def GetEnabledForensicFieldsCount(self):
        return _pyidengine.IdFileAnalysisSessionSettings_GetEnabledForensicFieldsCount(self)

    def HasEnabledForensicField(self, field_name):
        return _pyidengine.IdFileAnalysisSessionSettings_HasEnabledForensicField(self, field_name)

    def EnabledForensicFieldsBegin(self):
        return _pyidengine.IdFileAnalysisSessionSettings_EnabledForensicFieldsBegin(self)

    def EnabledForensicFieldsEnd(self):
        return _pyidengine.IdFileAnalysisSessionSettings_EnabledForensicFieldsEnd(self)

    def EnableForensicField(self, field_name):
        return _pyidengine.IdFileAnalysisSessionSettings_EnableForensicField(self, field_name)

    def DisableForensicField(self, field_name):
        return _pyidengine.IdFileAnalysisSessionSettings_DisableForensicField(self, field_name)

# Register IdFileAnalysisSessionSettings in _pyidengine:
_pyidengine.IdFileAnalysisSessionSettings_swigregister(IdFileAnalysisSessionSettings)
class IdSession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdSession

    def GetActivationRequest(self):
        return _pyidengine.IdSession_GetActivationRequest(self)

    def Activate(self, activation_response):
        return _pyidengine.IdSession_Activate(self, activation_response)

    def IsActivated(self):
        return _pyidengine.IdSession_IsActivated(self)

    def Process(self, *args):
        return _pyidengine.IdSession_Process(self, *args)

    def GetCurrentResult(self):
        return _pyidengine.IdSession_GetCurrentResult(self)

    def IsResultTerminal(self):
        return _pyidengine.IdSession_IsResultTerminal(self)

    def Reset(self):
        return _pyidengine.IdSession_Reset(self)

# Register IdSession in _pyidengine:
_pyidengine.IdSession_swigregister(IdSession)
class IdSessionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdSessionSettings

    def Clone(self):
        return _pyidengine.IdSessionSettings_Clone(self)

    def GetOptionsCount(self):
        return _pyidengine.IdSessionSettings_GetOptionsCount(self)

    def GetOption(self, option_name):
        return _pyidengine.IdSessionSettings_GetOption(self, option_name)

    def HasOption(self, option_name):
        return _pyidengine.IdSessionSettings_HasOption(self, option_name)

    def SetOption(self, option_name, option_value):
        return _pyidengine.IdSessionSettings_SetOption(self, option_name, option_value)

    def RemoveOption(self, option_name):
        return _pyidengine.IdSessionSettings_RemoveOption(self, option_name)

    def OptionsBegin(self):
        return _pyidengine.IdSessionSettings_OptionsBegin(self)

    def OptionsEnd(self):
        return _pyidengine.IdSessionSettings_OptionsEnd(self)

    def GetSupportedModesCount(self):
        return _pyidengine.IdSessionSettings_GetSupportedModesCount(self)

    def HasSupportedMode(self, mode_name):
        return _pyidengine.IdSessionSettings_HasSupportedMode(self, mode_name)

    def SupportedModesBegin(self):
        return _pyidengine.IdSessionSettings_SupportedModesBegin(self)

    def SupportedModesEnd(self):
        return _pyidengine.IdSessionSettings_SupportedModesEnd(self)

    def GetCurrentMode(self):
        return _pyidengine.IdSessionSettings_GetCurrentMode(self)

    def SetCurrentMode(self, mode_name):
        return _pyidengine.IdSessionSettings_SetCurrentMode(self, mode_name)

    def GetInternalEnginesCount(self):
        return _pyidengine.IdSessionSettings_GetInternalEnginesCount(self)

    def HasInternalEngine(self, engine_name):
        return _pyidengine.IdSessionSettings_HasInternalEngine(self, engine_name)

    def InternalEngineNamesBegin(self):
        return _pyidengine.IdSessionSettings_InternalEngineNamesBegin(self)

    def InternalEngineNamesEnd(self):
        return _pyidengine.IdSessionSettings_InternalEngineNamesEnd(self)

    def GetSupportedDocumentTypesCount(self, engine_name):
        return _pyidengine.IdSessionSettings_GetSupportedDocumentTypesCount(self, engine_name)

    def HasSupportedDocumentType(self, engine_name, doc_name):
        return _pyidengine.IdSessionSettings_HasSupportedDocumentType(self, engine_name, doc_name)

    def SupportedDocumentTypesBegin(self, engine_name):
        return _pyidengine.IdSessionSettings_SupportedDocumentTypesBegin(self, engine_name)

    def SupportedDocumentTypesEnd(self, engine_name):
        return _pyidengine.IdSessionSettings_SupportedDocumentTypesEnd(self, engine_name)

    def GetEnabledDocumentTypesCount(self):
        return _pyidengine.IdSessionSettings_GetEnabledDocumentTypesCount(self)

    def HasEnabledDocumentType(self, doc_name):
        return _pyidengine.IdSessionSettings_HasEnabledDocumentType(self, doc_name)

    def EnabledDocumentTypesBegin(self):
        return _pyidengine.IdSessionSettings_EnabledDocumentTypesBegin(self)

    def EnabledDocumentTypesEnd(self):
        return _pyidengine.IdSessionSettings_EnabledDocumentTypesEnd(self)

    def AddEnabledDocumentTypes(self, doc_type_mask):
        return _pyidengine.IdSessionSettings_AddEnabledDocumentTypes(self, doc_type_mask)

    def RemoveEnabledDocumentTypes(self, doc_type_mask):
        return _pyidengine.IdSessionSettings_RemoveEnabledDocumentTypes(self, doc_type_mask)

    def GetDocumentInfo(self, doc_name):
        return _pyidengine.IdSessionSettings_GetDocumentInfo(self, doc_name)

    def GetSupportedFieldsCount(self, doc_name):
        return _pyidengine.IdSessionSettings_GetSupportedFieldsCount(self, doc_name)

    def HasSupportedField(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_HasSupportedField(self, doc_name, field_name)

    def SupportedFieldsBegin(self, doc_name):
        return _pyidengine.IdSessionSettings_SupportedFieldsBegin(self, doc_name)

    def SupportedFieldsEnd(self, doc_name):
        return _pyidengine.IdSessionSettings_SupportedFieldsEnd(self, doc_name)

    def GetFieldType(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_GetFieldType(self, doc_name, field_name)

    def GetEnabledFieldsCount(self, doc_name):
        return _pyidengine.IdSessionSettings_GetEnabledFieldsCount(self, doc_name)

    def HasEnabledField(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_HasEnabledField(self, doc_name, field_name)

    def EnabledFieldsBegin(self, doc_name):
        return _pyidengine.IdSessionSettings_EnabledFieldsBegin(self, doc_name)

    def EnabledFieldsEnd(self, doc_name):
        return _pyidengine.IdSessionSettings_EnabledFieldsEnd(self, doc_name)

    def EnableField(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_EnableField(self, doc_name, field_name)

    def DisableField(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_DisableField(self, doc_name, field_name)

    def IsForensicsEnabled(self):
        return _pyidengine.IdSessionSettings_IsForensicsEnabled(self)

    def EnableForensics(self):
        return _pyidengine.IdSessionSettings_EnableForensics(self)

    def DisableForensics(self):
        return _pyidengine.IdSessionSettings_DisableForensics(self)

    def GetSupportedForensicFieldsCount(self, doc_name):
        return _pyidengine.IdSessionSettings_GetSupportedForensicFieldsCount(self, doc_name)

    def HasSupportedForensicField(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_HasSupportedForensicField(self, doc_name, field_name)

    def SupportedForensicFieldsBegin(self, doc_name):
        return _pyidengine.IdSessionSettings_SupportedForensicFieldsBegin(self, doc_name)

    def SupportedForensicFieldsEnd(self, doc_name):
        return _pyidengine.IdSessionSettings_SupportedForensicFieldsEnd(self, doc_name)

    def GetForensicFieldType(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_GetForensicFieldType(self, doc_name, field_name)

    def GetEnabledForensicFieldsCount(self, doc_name):
        return _pyidengine.IdSessionSettings_GetEnabledForensicFieldsCount(self, doc_name)

    def HasEnabledForensicField(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_HasEnabledForensicField(self, doc_name, field_name)

    def EnabledForensicFieldsBegin(self, doc_name):
        return _pyidengine.IdSessionSettings_EnabledForensicFieldsBegin(self, doc_name)

    def EnabledForensicFieldsEnd(self, doc_name):
        return _pyidengine.IdSessionSettings_EnabledForensicFieldsEnd(self, doc_name)

    def EnableForensicField(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_EnableForensicField(self, doc_name, field_name)

    def DisableForensicField(self, doc_name, field_name):
        return _pyidengine.IdSessionSettings_DisableForensicField(self, doc_name, field_name)

    def PermissiblePrefixDocMasksBegin(self):
        return _pyidengine.IdSessionSettings_PermissiblePrefixDocMasksBegin(self)

    def PermissiblePrefixDocMasksEnd(self):
        return _pyidengine.IdSessionSettings_PermissiblePrefixDocMasksEnd(self)

# Register IdSessionSettings in _pyidengine:
_pyidengine.IdSessionSettings_swigregister(IdSessionSettings)
class IdVideoAuthenticationInstruction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdVideoAuthenticationInstruction

    def __init__(self, *args):
        _pyidengine.IdVideoAuthenticationInstruction_swiginit(self, _pyidengine.new_IdVideoAuthenticationInstruction(*args))

    def GetFrameIndex(self):
        return _pyidengine.IdVideoAuthenticationInstruction_GetFrameIndex(self)

    def SetFrameIndex(self, frame_index):
        return _pyidengine.IdVideoAuthenticationInstruction_SetFrameIndex(self, frame_index)

    def GetInstructionCode(self):
        return _pyidengine.IdVideoAuthenticationInstruction_GetInstructionCode(self)

    def SetInstructionCode(self, code):
        return _pyidengine.IdVideoAuthenticationInstruction_SetInstructionCode(self, code)

    def GetParametersCount(self):
        return _pyidengine.IdVideoAuthenticationInstruction_GetParametersCount(self)

    def GetParameter(self, par_name):
        return _pyidengine.IdVideoAuthenticationInstruction_GetParameter(self, par_name)

    def HasParameter(self, par_name):
        return _pyidengine.IdVideoAuthenticationInstruction_HasParameter(self, par_name)

    def SetParameter(self, par_name, par_value):
        return _pyidengine.IdVideoAuthenticationInstruction_SetParameter(self, par_name, par_value)

    def RemoveParameter(self, par_name):
        return _pyidengine.IdVideoAuthenticationInstruction_RemoveParameter(self, par_name)

    def ParametersBegin(self):
        return _pyidengine.IdVideoAuthenticationInstruction_ParametersBegin(self)

    def ParametersEnd(self):
        return _pyidengine.IdVideoAuthenticationInstruction_ParametersEnd(self)

# Register IdVideoAuthenticationInstruction in _pyidengine:
_pyidengine.IdVideoAuthenticationInstruction_swigregister(IdVideoAuthenticationInstruction)
class IdVideoAuthenticationFrameInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdVideoAuthenticationFrameInfo

    def __init__(self, *args):
        _pyidengine.IdVideoAuthenticationFrameInfo_swiginit(self, _pyidengine.new_IdVideoAuthenticationFrameInfo(*args))

    def GetWidth(self):
        return _pyidengine.IdVideoAuthenticationFrameInfo_GetWidth(self)

    def SetWidth(self, width):
        return _pyidengine.IdVideoAuthenticationFrameInfo_SetWidth(self, width)

    def GetHeight(self):
        return _pyidengine.IdVideoAuthenticationFrameInfo_GetHeight(self)

    def SetHeight(self, height):
        return _pyidengine.IdVideoAuthenticationFrameInfo_SetHeight(self, height)

    def GetStride(self):
        return _pyidengine.IdVideoAuthenticationFrameInfo_GetStride(self)

    def SetStride(self, stride):
        return _pyidengine.IdVideoAuthenticationFrameInfo_SetStride(self, stride)

    def GetChannels(self):
        return _pyidengine.IdVideoAuthenticationFrameInfo_GetChannels(self)

    def SetChannels(self, channels):
        return _pyidengine.IdVideoAuthenticationFrameInfo_SetChannels(self, channels)

    def GetSize(self):
        return _pyidengine.IdVideoAuthenticationFrameInfo_GetSize(self)

    def SetSize(self, size):
        return _pyidengine.IdVideoAuthenticationFrameInfo_SetSize(self, size)

    def GetTimestamp(self):
        return _pyidengine.IdVideoAuthenticationFrameInfo_GetTimestamp(self)

    def SetTimestamp(self, timestamp):
        return _pyidengine.IdVideoAuthenticationFrameInfo_SetTimestamp(self, timestamp)

# Register IdVideoAuthenticationFrameInfo in _pyidengine:
_pyidengine.IdVideoAuthenticationFrameInfo_swigregister(IdVideoAuthenticationFrameInfo)
class IdVideoAuthenticationAnomaly(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdVideoAuthenticationAnomaly

    def __init__(self, *args):
        _pyidengine.IdVideoAuthenticationAnomaly_swiginit(self, _pyidengine.new_IdVideoAuthenticationAnomaly(*args))

    def GetName(self):
        return _pyidengine.IdVideoAuthenticationAnomaly_GetName(self)

    def SetName(self, name):
        return _pyidengine.IdVideoAuthenticationAnomaly_SetName(self, name)

    def GetStartFrame(self):
        return _pyidengine.IdVideoAuthenticationAnomaly_GetStartFrame(self)

    def SetStartFrame(self, start_frame):
        return _pyidengine.IdVideoAuthenticationAnomaly_SetStartFrame(self, start_frame)

    def GetEndFrame(self):
        return _pyidengine.IdVideoAuthenticationAnomaly_GetEndFrame(self)

    def SetEndFrame(self, end_frame):
        return _pyidengine.IdVideoAuthenticationAnomaly_SetEndFrame(self, end_frame)

    def GetBaseFieldInfo(self):
        return _pyidengine.IdVideoAuthenticationAnomaly_GetBaseFieldInfo(self)

    def GetMutableBaseFieldInfo(self):
        return _pyidengine.IdVideoAuthenticationAnomaly_GetMutableBaseFieldInfo(self)

# Register IdVideoAuthenticationAnomaly in _pyidengine:
_pyidengine.IdVideoAuthenticationAnomaly_swigregister(IdVideoAuthenticationAnomaly)
class IdVideoAuthenticationTranscript(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdVideoAuthenticationTranscript

    def __init__(self, *args):
        _pyidengine.IdVideoAuthenticationTranscript_swiginit(self, _pyidengine.new_IdVideoAuthenticationTranscript(*args))

    def GetFrameInfosCount(self):
        return _pyidengine.IdVideoAuthenticationTranscript_GetFrameInfosCount(self)

    def GetFrameInfo(self, index):
        return _pyidengine.IdVideoAuthenticationTranscript_GetFrameInfo(self, index)

    def GetMutableFrameInfo(self, index):
        return _pyidengine.IdVideoAuthenticationTranscript_GetMutableFrameInfo(self, index)

    def AppendFrameInfo(self, frame_info):
        return _pyidengine.IdVideoAuthenticationTranscript_AppendFrameInfo(self, frame_info)

    def SetFrameInfo(self, index, frame_info):
        return _pyidengine.IdVideoAuthenticationTranscript_SetFrameInfo(self, index, frame_info)

    def ResizeFrameInfosContainer(self, size):
        return _pyidengine.IdVideoAuthenticationTranscript_ResizeFrameInfosContainer(self, size)

    def GetInstructionsCount(self):
        return _pyidengine.IdVideoAuthenticationTranscript_GetInstructionsCount(self)

    def GetInstruction(self, index):
        return _pyidengine.IdVideoAuthenticationTranscript_GetInstruction(self, index)

    def GetMutableInstruction(self, index):
        return _pyidengine.IdVideoAuthenticationTranscript_GetMutableInstruction(self, index)

    def AppendInstruction(self, instruction):
        return _pyidengine.IdVideoAuthenticationTranscript_AppendInstruction(self, instruction)

    def SetInstruction(self, index, instruction):
        return _pyidengine.IdVideoAuthenticationTranscript_SetInstruction(self, index, instruction)

    def ResizeInstructionsContainer(self, size):
        return _pyidengine.IdVideoAuthenticationTranscript_ResizeInstructionsContainer(self, size)

    def GetAnomaliesCount(self):
        return _pyidengine.IdVideoAuthenticationTranscript_GetAnomaliesCount(self)

    def GetAnomaly(self, index):
        return _pyidengine.IdVideoAuthenticationTranscript_GetAnomaly(self, index)

    def GetMutableAnomaly(self, index):
        return _pyidengine.IdVideoAuthenticationTranscript_GetMutableAnomaly(self, index)

    def AppendAnomaly(self, anomaly):
        return _pyidengine.IdVideoAuthenticationTranscript_AppendAnomaly(self, anomaly)

    def SetAnomaly(self, index, anomaly):
        return _pyidengine.IdVideoAuthenticationTranscript_SetAnomaly(self, index, anomaly)

    def ResizeAnomaliesContainer(self, size):
        return _pyidengine.IdVideoAuthenticationTranscript_ResizeAnomaliesContainer(self, size)

    def GetCurrentInstruction(self):
        return _pyidengine.IdVideoAuthenticationTranscript_GetCurrentInstruction(self)

    def GetMutableCurrentInstruction(self):
        return _pyidengine.IdVideoAuthenticationTranscript_GetMutableCurrentInstruction(self)

    def SetCurrentInstruction(self, instruction):
        return _pyidengine.IdVideoAuthenticationTranscript_SetCurrentInstruction(self, instruction)

# Register IdVideoAuthenticationTranscript in _pyidengine:
_pyidengine.IdVideoAuthenticationTranscript_swigregister(IdVideoAuthenticationTranscript)
class IdVideoAuthenticationCallbacks(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdVideoAuthenticationCallbacks

    def InstructionReceived(self, index, instruction):
        return _pyidengine.IdVideoAuthenticationCallbacks_InstructionReceived(self, index, instruction)

    def AnomalyRegistered(self, index, anomaly):
        return _pyidengine.IdVideoAuthenticationCallbacks_AnomalyRegistered(self, index, anomaly)

    def DocumentResultUpdated(self, document_result):
        return _pyidengine.IdVideoAuthenticationCallbacks_DocumentResultUpdated(self, document_result)

    def FaceMatchingResultUpdated(self, face_matching_result):
        return _pyidengine.IdVideoAuthenticationCallbacks_FaceMatchingResultUpdated(self, face_matching_result)

    def FaceLivenessResultUpdated(self, face_liveness_result):
        return _pyidengine.IdVideoAuthenticationCallbacks_FaceLivenessResultUpdated(self, face_liveness_result)

    def AuthenticationStatusUpdated(self, status):
        return _pyidengine.IdVideoAuthenticationCallbacks_AuthenticationStatusUpdated(self, status)

    def GlobalTimeoutReached(self):
        return _pyidengine.IdVideoAuthenticationCallbacks_GlobalTimeoutReached(self)

    def InstructionTimeoutReached(self):
        return _pyidengine.IdVideoAuthenticationCallbacks_InstructionTimeoutReached(self)

    def SessionEnded(self):
        return _pyidengine.IdVideoAuthenticationCallbacks_SessionEnded(self)

    def MessageReceived(self, message):
        return _pyidengine.IdVideoAuthenticationCallbacks_MessageReceived(self, message)

# Register IdVideoAuthenticationCallbacks in _pyidengine:
_pyidengine.IdVideoAuthenticationCallbacks_swigregister(IdVideoAuthenticationCallbacks)
class IdVideoAuthenticationSessionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdVideoAuthenticationSessionSettings

    def Clone(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_Clone(self)

    def GetOptionsCount(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetOptionsCount(self)

    def GetOption(self, option_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetOption(self, option_name)

    def HasOption(self, option_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_HasOption(self, option_name)

    def SetOption(self, option_name, option_value):
        return _pyidengine.IdVideoAuthenticationSessionSettings_SetOption(self, option_name, option_value)

    def RemoveOption(self, option_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_RemoveOption(self, option_name)

    def OptionsBegin(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_OptionsBegin(self)

    def OptionsEnd(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_OptionsEnd(self)

    def GetSupportedModesCount(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetSupportedModesCount(self)

    def HasSupportedMode(self, mode_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_HasSupportedMode(self, mode_name)

    def SupportedModesBegin(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_SupportedModesBegin(self)

    def SupportedModesEnd(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_SupportedModesEnd(self)

    def GetCurrentMode(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetCurrentMode(self)

    def SetCurrentMode(self, mode_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_SetCurrentMode(self, mode_name)

    def GetInternalEnginesCount(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetInternalEnginesCount(self)

    def HasInternalEngine(self, engine_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_HasInternalEngine(self, engine_name)

    def InternalEngineNamesBegin(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_InternalEngineNamesBegin(self)

    def InternalEngineNamesEnd(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_InternalEngineNamesEnd(self)

    def GetSupportedDocumentTypesCount(self, engine_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetSupportedDocumentTypesCount(self, engine_name)

    def HasSupportedDocumentType(self, engine_name, doc_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_HasSupportedDocumentType(self, engine_name, doc_name)

    def SupportedDocumentTypesBegin(self, engine_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_SupportedDocumentTypesBegin(self, engine_name)

    def SupportedDocumentTypesEnd(self, engine_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_SupportedDocumentTypesEnd(self, engine_name)

    def GetEnabledDocumentTypesCount(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetEnabledDocumentTypesCount(self)

    def HasEnabledDocumentType(self, doc_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_HasEnabledDocumentType(self, doc_name)

    def EnabledDocumentTypesBegin(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_EnabledDocumentTypesBegin(self)

    def EnabledDocumentTypesEnd(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_EnabledDocumentTypesEnd(self)

    def AddEnabledDocumentTypes(self, doc_type_mask):
        return _pyidengine.IdVideoAuthenticationSessionSettings_AddEnabledDocumentTypes(self, doc_type_mask)

    def RemoveEnabledDocumentTypes(self, doc_type_mask):
        return _pyidengine.IdVideoAuthenticationSessionSettings_RemoveEnabledDocumentTypes(self, doc_type_mask)

    def GetVideoAuthenticationModesCount(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetVideoAuthenticationModesCount(self)

    def HasVideoAuthenticationMode(self, video_authentication_mode):
        return _pyidengine.IdVideoAuthenticationSessionSettings_HasVideoAuthenticationMode(self, video_authentication_mode)

    def VideoAuthenticationModesBegin(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_VideoAuthenticationModesBegin(self)

    def VideoAuthenticationModesEnd(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_VideoAuthenticationModesEnd(self)

    def SetCurrentVideoAuthenticationMode(self, video_authentication):
        return _pyidengine.IdVideoAuthenticationSessionSettings_SetCurrentVideoAuthenticationMode(self, video_authentication)

    def GetCurrentVideoAuthenticationMode(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetCurrentVideoAuthenticationMode(self)

    def GetDocumentInfo(self, doc_name):
        return _pyidengine.IdVideoAuthenticationSessionSettings_GetDocumentInfo(self, doc_name)

    def PermissiblePrefixDocMasksBegin(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_PermissiblePrefixDocMasksBegin(self)

    def PermissiblePrefixDocMasksEnd(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_PermissiblePrefixDocMasksEnd(self)

    def IsForensicsEnabled(self):
        return _pyidengine.IdVideoAuthenticationSessionSettings_IsForensicsEnabled(self)

# Register IdVideoAuthenticationSessionSettings in _pyidengine:
_pyidengine.IdVideoAuthenticationSessionSettings_swigregister(IdVideoAuthenticationSessionSettings)
class IdVideoAuthenticationSession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdVideoAuthenticationSession

    def GetActivationRequest(self):
        return _pyidengine.IdVideoAuthenticationSession_GetActivationRequest(self)

    def Activate(self, activation_response):
        return _pyidengine.IdVideoAuthenticationSession_Activate(self, activation_response)

    def IsActivated(self):
        return _pyidengine.IdVideoAuthenticationSession_IsActivated(self)

    def ProcessFrame(self, frame):
        return _pyidengine.IdVideoAuthenticationSession_ProcessFrame(self, frame)

    def ProcessData(self, data):
        return _pyidengine.IdVideoAuthenticationSession_ProcessData(self, data)

    def GetCurrentInstruction(self):
        return _pyidengine.IdVideoAuthenticationSession_GetCurrentInstruction(self)

    def HasDocumentResult(self):
        return _pyidengine.IdVideoAuthenticationSession_HasDocumentResult(self)

    def GetDocumentResult(self):
        return _pyidengine.IdVideoAuthenticationSession_GetDocumentResult(self)

    def HasFaceMatchingResult(self):
        return _pyidengine.IdVideoAuthenticationSession_HasFaceMatchingResult(self)

    def GetFaceMatchingResult(self):
        return _pyidengine.IdVideoAuthenticationSession_GetFaceMatchingResult(self)

    def HasFaceLivenessResult(self):
        return _pyidengine.IdVideoAuthenticationSession_HasFaceLivenessResult(self)

    def GetFaceLivenessResult(self):
        return _pyidengine.IdVideoAuthenticationSession_GetFaceLivenessResult(self)

    def GetAuthenticationStatus(self):
        return _pyidengine.IdVideoAuthenticationSession_GetAuthenticationStatus(self)

    def GetTranscript(self):
        return _pyidengine.IdVideoAuthenticationSession_GetTranscript(self)

    def Suspend(self):
        return _pyidengine.IdVideoAuthenticationSession_Suspend(self)

    def Resume(self):
        return _pyidengine.IdVideoAuthenticationSession_Resume(self)

    def Reset(self):
        return _pyidengine.IdVideoAuthenticationSession_Reset(self)

# Register IdVideoAuthenticationSession in _pyidengine:
_pyidengine.IdVideoAuthenticationSession_swigregister(IdVideoAuthenticationSession)
class IdEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyidengine.delete_IdEngine

    def CreateSessionSettings(self):
        return _pyidengine.IdEngine_CreateSessionSettings(self)

    def SpawnSession(self, settings, signature, feedback_reporter=None):
        return _pyidengine.IdEngine_SpawnSession(self, settings, signature, feedback_reporter)

    def CreateFileAnalysisSessionSettings(self):
        return _pyidengine.IdEngine_CreateFileAnalysisSessionSettings(self)

    def SpawnFileAnalysisSession(self, settings, signature):
        return _pyidengine.IdEngine_SpawnFileAnalysisSession(self, settings, signature)

    def CreateFaceSessionSettings(self):
        return _pyidengine.IdEngine_CreateFaceSessionSettings(self)

    def SpawnFaceSession(self, settings, signature, feedback_reporter=None):
        return _pyidengine.IdEngine_SpawnFaceSession(self, settings, signature, feedback_reporter)

    def CreateFieldProcessingSessionSettings(self):
        return _pyidengine.IdEngine_CreateFieldProcessingSessionSettings(self)

    def SpawnFieldProcessingSession(self, settings, signature):
        return _pyidengine.IdEngine_SpawnFieldProcessingSession(self, settings, signature)

    def CreateVideoAuthenticationSessionSettings(self):
        return _pyidengine.IdEngine_CreateVideoAuthenticationSessionSettings(self)

    def SpawnVideoAuthenticationSession(self, settings, signature, video_authentication_callbacks=None, feedback_reporter=None, face_feedback_reporter=None):
        return _pyidengine.IdEngine_SpawnVideoAuthenticationSession(self, settings, signature, video_authentication_callbacks, feedback_reporter, face_feedback_reporter)

    @staticmethod
    def Create(*args):
        return _pyidengine.IdEngine_Create(*args)

    @staticmethod
    def CreateFromEmbeddedBundle(lazy_configuration=True, init_concurrency=0, delayed_initialization=False):
        return _pyidengine.IdEngine_CreateFromEmbeddedBundle(lazy_configuration, init_concurrency, delayed_initialization)

    @staticmethod
    def GetVersion():
        return _pyidengine.IdEngine_GetVersion()

# Register IdEngine in _pyidengine:
_pyidengine.IdEngine_swigregister(IdEngine)

