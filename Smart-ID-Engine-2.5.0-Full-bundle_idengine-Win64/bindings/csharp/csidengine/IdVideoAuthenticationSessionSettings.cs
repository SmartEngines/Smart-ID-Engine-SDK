//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdVideoAuthenticationSessionSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdVideoAuthenticationSessionSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdVideoAuthenticationSessionSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdVideoAuthenticationSessionSettings obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdVideoAuthenticationSessionSettings() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdVideoAuthenticationSessionSettings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual IdVideoAuthenticationSessionSettings Clone() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_Clone(swigCPtr);
    IdVideoAuthenticationSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdVideoAuthenticationSessionSettings(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetOptionsCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetOptionsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetOption(string option_name) {
    string ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasOption(string option_name) {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_HasOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetOption(string option_name, string option_value) {
    csidenginePINVOKE.IdVideoAuthenticationSessionSettings_SetOption(swigCPtr, option_name, option_value);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveOption(string option_name) {
    csidenginePINVOKE.IdVideoAuthenticationSessionSettings_RemoveOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual StringsMapIterator OptionsBegin() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_OptionsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator OptionsEnd() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_OptionsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetSupportedModesCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetSupportedModesCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasSupportedMode(string mode_name) {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_HasSupportedMode(swigCPtr, mode_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator SupportedModesBegin() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_SupportedModesBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator SupportedModesEnd() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_SupportedModesEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetCurrentMode() {
    string ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetCurrentMode(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCurrentMode(string mode_name) {
    csidenginePINVOKE.IdVideoAuthenticationSessionSettings_SetCurrentMode(swigCPtr, mode_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetInternalEnginesCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetInternalEnginesCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasInternalEngine(string engine_name) {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_HasInternalEngine(swigCPtr, engine_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator InternalEngineNamesBegin() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_InternalEngineNamesBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator InternalEngineNamesEnd() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_InternalEngineNamesEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetSupportedDocumentTypesCount(string engine_name) {
    int ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetSupportedDocumentTypesCount(swigCPtr, engine_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasSupportedDocumentType(string engine_name, string doc_name) {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_HasSupportedDocumentType(swigCPtr, engine_name, doc_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator SupportedDocumentTypesBegin(string engine_name) {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_SupportedDocumentTypesBegin(swigCPtr, engine_name), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator SupportedDocumentTypesEnd(string engine_name) {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_SupportedDocumentTypesEnd(swigCPtr, engine_name), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetEnabledDocumentTypesCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetEnabledDocumentTypesCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasEnabledDocumentType(string doc_name) {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_HasEnabledDocumentType(swigCPtr, doc_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator EnabledDocumentTypesBegin() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_EnabledDocumentTypesBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator EnabledDocumentTypesEnd() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_EnabledDocumentTypesEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AddEnabledDocumentTypes(string doc_type_mask) {
    csidenginePINVOKE.IdVideoAuthenticationSessionSettings_AddEnabledDocumentTypes(swigCPtr, doc_type_mask);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveEnabledDocumentTypes(string doc_type_mask) {
    csidenginePINVOKE.IdVideoAuthenticationSessionSettings_RemoveEnabledDocumentTypes(swigCPtr, doc_type_mask);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetVideoAuthenticationModesCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetVideoAuthenticationModesCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasVideoAuthenticationMode(string video_authentication_mode) {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_HasVideoAuthenticationMode(swigCPtr, video_authentication_mode);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator VideoAuthenticationModesBegin() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_VideoAuthenticationModesBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator VideoAuthenticationModesEnd() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_VideoAuthenticationModesEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCurrentVideoAuthenticationMode(string video_authentication) {
    csidenginePINVOKE.IdVideoAuthenticationSessionSettings_SetCurrentVideoAuthenticationMode(swigCPtr, video_authentication);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetCurrentVideoAuthenticationMode() {
    string ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetCurrentVideoAuthenticationMode(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdDocumentInfo GetDocumentInfo(string doc_name) {
    IdDocumentInfo ret = new IdDocumentInfo(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_GetDocumentInfo(swigCPtr, doc_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator PermissiblePrefixDocMasksBegin() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_PermissiblePrefixDocMasksBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator PermissiblePrefixDocMasksEnd() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdVideoAuthenticationSessionSettings_PermissiblePrefixDocMasksEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsForensicsEnabled() {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSessionSettings_IsForensicsEnabled(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
