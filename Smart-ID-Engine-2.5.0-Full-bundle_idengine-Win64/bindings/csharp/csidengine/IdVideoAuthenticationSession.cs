//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdVideoAuthenticationSession : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdVideoAuthenticationSession(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdVideoAuthenticationSession obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdVideoAuthenticationSession obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdVideoAuthenticationSession() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdVideoAuthenticationSession(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual string GetActivationRequest() {
    string ret = csidenginePINVOKE.IdVideoAuthenticationSession_GetActivationRequest(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Activate(string activation_response) {
    csidenginePINVOKE.IdVideoAuthenticationSession_Activate(swigCPtr, activation_response);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool IsActivated() {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSession_IsActivated(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ProcessFrame(Image frame) {
    csidenginePINVOKE.IdVideoAuthenticationSession_ProcessFrame(swigCPtr, Image.getCPtr(frame));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ProcessData(ByteString data) {
    csidenginePINVOKE.IdVideoAuthenticationSession_ProcessData(swigCPtr, ByteString.getCPtr(data));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IdVideoAuthenticationInstruction GetCurrentInstruction() {
    IdVideoAuthenticationInstruction ret = new IdVideoAuthenticationInstruction(csidenginePINVOKE.IdVideoAuthenticationSession_GetCurrentInstruction(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasDocumentResult() {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSession_HasDocumentResult(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdResult GetDocumentResult() {
    IdResult ret = new IdResult(csidenginePINVOKE.IdVideoAuthenticationSession_GetDocumentResult(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasFaceMatchingResult() {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSession_HasFaceMatchingResult(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFaceSimilarityResult GetFaceMatchingResult() {
    IdFaceSimilarityResult ret = new IdFaceSimilarityResult(csidenginePINVOKE.IdVideoAuthenticationSession_GetFaceMatchingResult(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasFaceLivenessResult() {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationSession_HasFaceLivenessResult(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFaceLivenessResult GetFaceLivenessResult() {
    IdFaceLivenessResult ret = new IdFaceLivenessResult(csidenginePINVOKE.IdVideoAuthenticationSession_GetFaceLivenessResult(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdCheckStatus GetAuthenticationStatus() {
    IdCheckStatus ret = (IdCheckStatus)csidenginePINVOKE.IdVideoAuthenticationSession_GetAuthenticationStatus(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdVideoAuthenticationTranscript GetTranscript() {
    IdVideoAuthenticationTranscript ret = new IdVideoAuthenticationTranscript(csidenginePINVOKE.IdVideoAuthenticationSession_GetTranscript(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Suspend() {
    csidenginePINVOKE.IdVideoAuthenticationSession_Suspend(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Resume() {
    csidenginePINVOKE.IdVideoAuthenticationSession_Resume(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Reset() {
    csidenginePINVOKE.IdVideoAuthenticationSession_Reset(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
