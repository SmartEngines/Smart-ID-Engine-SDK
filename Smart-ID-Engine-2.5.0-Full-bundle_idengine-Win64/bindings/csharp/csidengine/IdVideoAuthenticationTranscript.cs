//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdVideoAuthenticationTranscript : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdVideoAuthenticationTranscript(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdVideoAuthenticationTranscript obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdVideoAuthenticationTranscript obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdVideoAuthenticationTranscript() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdVideoAuthenticationTranscript(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IdVideoAuthenticationTranscript(IdVideoAuthenticationInstruction initial_instruction) : this(csidenginePINVOKE.new_IdVideoAuthenticationTranscript__SWIG_0(IdVideoAuthenticationInstruction.getCPtr(initial_instruction)), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdVideoAuthenticationTranscript(IdVideoAuthenticationTranscript copy) : this(csidenginePINVOKE.new_IdVideoAuthenticationTranscript__SWIG_1(IdVideoAuthenticationTranscript.getCPtr(copy)), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetFrameInfosCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationTranscript_GetFrameInfosCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdVideoAuthenticationFrameInfo GetFrameInfo(int index) {
    IdVideoAuthenticationFrameInfo ret = new IdVideoAuthenticationFrameInfo(csidenginePINVOKE.IdVideoAuthenticationTranscript_GetFrameInfo(swigCPtr, index), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdVideoAuthenticationFrameInfo GetMutableFrameInfo(int index) {
    IdVideoAuthenticationFrameInfo ret = new IdVideoAuthenticationFrameInfo(csidenginePINVOKE.IdVideoAuthenticationTranscript_GetMutableFrameInfo(swigCPtr, index), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AppendFrameInfo(IdVideoAuthenticationFrameInfo frame_info) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_AppendFrameInfo(swigCPtr, IdVideoAuthenticationFrameInfo.getCPtr(frame_info));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFrameInfo(int index, IdVideoAuthenticationFrameInfo frame_info) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_SetFrameInfo(swigCPtr, index, IdVideoAuthenticationFrameInfo.getCPtr(frame_info));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ResizeFrameInfosContainer(int size) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_ResizeFrameInfosContainer(swigCPtr, size);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetInstructionsCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationTranscript_GetInstructionsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdVideoAuthenticationInstruction GetInstruction(int index) {
    IdVideoAuthenticationInstruction ret = new IdVideoAuthenticationInstruction(csidenginePINVOKE.IdVideoAuthenticationTranscript_GetInstruction(swigCPtr, index), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdVideoAuthenticationInstruction GetMutableInstruction(int index) {
    IdVideoAuthenticationInstruction ret = new IdVideoAuthenticationInstruction(csidenginePINVOKE.IdVideoAuthenticationTranscript_GetMutableInstruction(swigCPtr, index), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AppendInstruction(IdVideoAuthenticationInstruction instruction) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_AppendInstruction(swigCPtr, IdVideoAuthenticationInstruction.getCPtr(instruction));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInstruction(int index, IdVideoAuthenticationInstruction instruction) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_SetInstruction(swigCPtr, index, IdVideoAuthenticationInstruction.getCPtr(instruction));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ResizeInstructionsContainer(int size) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_ResizeInstructionsContainer(swigCPtr, size);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetAnomaliesCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationTranscript_GetAnomaliesCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdVideoAuthenticationAnomaly GetAnomaly(int index) {
    IdVideoAuthenticationAnomaly ret = new IdVideoAuthenticationAnomaly(csidenginePINVOKE.IdVideoAuthenticationTranscript_GetAnomaly(swigCPtr, index), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdVideoAuthenticationAnomaly GetMutableAnomaly(int index) {
    IdVideoAuthenticationAnomaly ret = new IdVideoAuthenticationAnomaly(csidenginePINVOKE.IdVideoAuthenticationTranscript_GetMutableAnomaly(swigCPtr, index), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AppendAnomaly(IdVideoAuthenticationAnomaly anomaly) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_AppendAnomaly(swigCPtr, IdVideoAuthenticationAnomaly.getCPtr(anomaly));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAnomaly(int index, IdVideoAuthenticationAnomaly anomaly) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_SetAnomaly(swigCPtr, index, IdVideoAuthenticationAnomaly.getCPtr(anomaly));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ResizeAnomaliesContainer(int size) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_ResizeAnomaliesContainer(swigCPtr, size);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdVideoAuthenticationInstruction GetCurrentInstruction() {
    IdVideoAuthenticationInstruction ret = new IdVideoAuthenticationInstruction(csidenginePINVOKE.IdVideoAuthenticationTranscript_GetCurrentInstruction(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdVideoAuthenticationInstruction GetMutableCurrentInstruction() {
    IdVideoAuthenticationInstruction ret = new IdVideoAuthenticationInstruction(csidenginePINVOKE.IdVideoAuthenticationTranscript_GetMutableCurrentInstruction(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCurrentInstruction(IdVideoAuthenticationInstruction instruction) {
    csidenginePINVOKE.IdVideoAuthenticationTranscript_SetCurrentInstruction(swigCPtr, IdVideoAuthenticationInstruction.getCPtr(instruction));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
