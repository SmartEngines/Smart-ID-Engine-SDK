//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdVideoAuthenticationAnomaly : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdVideoAuthenticationAnomaly(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdVideoAuthenticationAnomaly obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdVideoAuthenticationAnomaly obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdVideoAuthenticationAnomaly() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdVideoAuthenticationAnomaly(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IdVideoAuthenticationAnomaly(string name, int start_frame, int end_frame, bool is_accepted, double confidence) : this(csidenginePINVOKE.new_IdVideoAuthenticationAnomaly__SWIG_0(name, start_frame, end_frame, is_accepted, confidence), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdVideoAuthenticationAnomaly(string name, int start_frame, int end_frame, bool is_accepted) : this(csidenginePINVOKE.new_IdVideoAuthenticationAnomaly__SWIG_1(name, start_frame, end_frame, is_accepted), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdVideoAuthenticationAnomaly(string name, int start_frame, int end_frame) : this(csidenginePINVOKE.new_IdVideoAuthenticationAnomaly__SWIG_2(name, start_frame, end_frame), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdVideoAuthenticationAnomaly(IdVideoAuthenticationAnomaly copy) : this(csidenginePINVOKE.new_IdVideoAuthenticationAnomaly__SWIG_3(IdVideoAuthenticationAnomaly.getCPtr(copy)), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetName() {
    string ret = csidenginePINVOKE.IdVideoAuthenticationAnomaly_GetName(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetName(string name) {
    csidenginePINVOKE.IdVideoAuthenticationAnomaly_SetName(swigCPtr, name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetStartFrame() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationAnomaly_GetStartFrame(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStartFrame(int start_frame) {
    csidenginePINVOKE.IdVideoAuthenticationAnomaly_SetStartFrame(swigCPtr, start_frame);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetEndFrame() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationAnomaly_GetEndFrame(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndFrame(int end_frame) {
    csidenginePINVOKE.IdVideoAuthenticationAnomaly_SetEndFrame(swigCPtr, end_frame);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdBaseFieldInfo GetBaseFieldInfo() {
    IdBaseFieldInfo ret = new IdBaseFieldInfo(csidenginePINVOKE.IdVideoAuthenticationAnomaly_GetBaseFieldInfo(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdBaseFieldInfo GetMutableBaseFieldInfo() {
    IdBaseFieldInfo ret = new IdBaseFieldInfo(csidenginePINVOKE.IdVideoAuthenticationAnomaly_GetMutableBaseFieldInfo(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
