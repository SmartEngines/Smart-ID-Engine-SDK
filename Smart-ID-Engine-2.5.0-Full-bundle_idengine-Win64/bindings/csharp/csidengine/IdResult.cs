//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdResult obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdResult() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IdResult(bool is_terminal) : this(csidenginePINVOKE.new_IdResult__SWIG_0(is_terminal), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdResult() : this(csidenginePINVOKE.new_IdResult__SWIG_1(), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdResult(IdResult copy) : this(csidenginePINVOKE.new_IdResult__SWIG_2(IdResult.getCPtr(copy)), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetDocumentType() {
    string ret = csidenginePINVOKE.IdResult_GetDocumentType(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDocumentType(string document_type) {
    csidenginePINVOKE.IdResult_SetDocumentType(swigCPtr, document_type);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetTemplateDetectionResultsCount() {
    int ret = csidenginePINVOKE.IdResult_GetTemplateDetectionResultsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdTemplateDetectionResult GetTemplateDetectionResult(int result_id) {
    IdTemplateDetectionResult ret = new IdTemplateDetectionResult(csidenginePINVOKE.IdResult_GetTemplateDetectionResult(swigCPtr, result_id), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AppendTemplateDetectionResult(IdTemplateDetectionResult result) {
    csidenginePINVOKE.IdResult_AppendTemplateDetectionResult(swigCPtr, IdTemplateDetectionResult.getCPtr(result));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearTemplateDetectionResults() {
    csidenginePINVOKE.IdResult_ClearTemplateDetectionResults(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetTemplateSegmentationResultsCount() {
    int ret = csidenginePINVOKE.IdResult_GetTemplateSegmentationResultsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdTemplateSegmentationResult GetTemplateSegmentationResult(int result_id) {
    IdTemplateSegmentationResult ret = new IdTemplateSegmentationResult(csidenginePINVOKE.IdResult_GetTemplateSegmentationResult(swigCPtr, result_id), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AppendTemplateSegmentationResult(IdTemplateSegmentationResult result) {
    csidenginePINVOKE.IdResult_AppendTemplateSegmentationResult(swigCPtr, IdTemplateSegmentationResult.getCPtr(result));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearTemplateSegmentationResults() {
    csidenginePINVOKE.IdResult_ClearTemplateSegmentationResults(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetIsTerminal() {
    bool ret = csidenginePINVOKE.IdResult_GetIsTerminal(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetIsTerminal(bool is_terminal) {
    csidenginePINVOKE.IdResult_SetIsTerminal(swigCPtr, is_terminal);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringsSet GetSeenTemplates() {
    StringsSet ret = new StringsSet(csidenginePINVOKE.IdResult_GetSeenTemplates(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsSet GetTerminalTemplates() {
    StringsSet ret = new StringsSet(csidenginePINVOKE.IdResult_GetTerminalTemplates(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetTextFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetTextFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasTextField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasTextField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdTextField GetTextField(string field_name) {
    IdTextField ret = new IdTextField(csidenginePINVOKE.IdResult_GetTextField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTextField(string field_name, IdTextField field) {
    csidenginePINVOKE.IdResult_SetTextField(swigCPtr, field_name, IdTextField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveTextField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveTextField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdTextFieldsMapIterator TextFieldsBegin() {
    IdTextFieldsMapIterator ret = new IdTextFieldsMapIterator(csidenginePINVOKE.IdResult_TextFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdTextFieldsMapIterator TextFieldsEnd() {
    IdTextFieldsMapIterator ret = new IdTextFieldsMapIterator(csidenginePINVOKE.IdResult_TextFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetImageFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetImageFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasImageField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasImageField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdImageField GetImageField(string field_name) {
    IdImageField ret = new IdImageField(csidenginePINVOKE.IdResult_GetImageField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetImageField(string field_name, IdImageField field) {
    csidenginePINVOKE.IdResult_SetImageField(swigCPtr, field_name, IdImageField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveImageField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveImageField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdImageFieldsMapIterator ImageFieldsBegin() {
    IdImageFieldsMapIterator ret = new IdImageFieldsMapIterator(csidenginePINVOKE.IdResult_ImageFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdImageFieldsMapIterator ImageFieldsEnd() {
    IdImageFieldsMapIterator ret = new IdImageFieldsMapIterator(csidenginePINVOKE.IdResult_ImageFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetAnimatedFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetAnimatedFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasAnimatedField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasAnimatedField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdAnimatedField GetAnimatedField(string field_name) {
    IdAnimatedField ret = new IdAnimatedField(csidenginePINVOKE.IdResult_GetAnimatedField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAnimatedField(string field_name, IdAnimatedField field) {
    csidenginePINVOKE.IdResult_SetAnimatedField(swigCPtr, field_name, IdAnimatedField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAnimatedField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveAnimatedField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdAnimatedFieldsMapIterator AnimatedFieldsBegin() {
    IdAnimatedFieldsMapIterator ret = new IdAnimatedFieldsMapIterator(csidenginePINVOKE.IdResult_AnimatedFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdAnimatedFieldsMapIterator AnimatedFieldsEnd() {
    IdAnimatedFieldsMapIterator ret = new IdAnimatedFieldsMapIterator(csidenginePINVOKE.IdResult_AnimatedFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetCheckFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetCheckFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasCheckField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasCheckField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdCheckField GetCheckField(string field_name) {
    IdCheckField ret = new IdCheckField(csidenginePINVOKE.IdResult_GetCheckField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCheckField(string field_name, IdCheckField field) {
    csidenginePINVOKE.IdResult_SetCheckField(swigCPtr, field_name, IdCheckField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveCheckField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveCheckField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdCheckFieldsMapIterator CheckFieldsBegin() {
    IdCheckFieldsMapIterator ret = new IdCheckFieldsMapIterator(csidenginePINVOKE.IdResult_CheckFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdCheckFieldsMapIterator CheckFieldsEnd() {
    IdCheckFieldsMapIterator ret = new IdCheckFieldsMapIterator(csidenginePINVOKE.IdResult_CheckFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetForensicTextFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetForensicTextFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasForensicTextField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasForensicTextField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdTextField GetForensicTextField(string field_name) {
    IdTextField ret = new IdTextField(csidenginePINVOKE.IdResult_GetForensicTextField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetForensicTextField(string field_name, IdTextField field) {
    csidenginePINVOKE.IdResult_SetForensicTextField(swigCPtr, field_name, IdTextField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveForensicTextField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveForensicTextField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdTextFieldsMapIterator ForensicTextFieldsBegin() {
    IdTextFieldsMapIterator ret = new IdTextFieldsMapIterator(csidenginePINVOKE.IdResult_ForensicTextFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdTextFieldsMapIterator ForensicTextFieldsEnd() {
    IdTextFieldsMapIterator ret = new IdTextFieldsMapIterator(csidenginePINVOKE.IdResult_ForensicTextFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetForensicImageFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetForensicImageFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasForensicImageField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasForensicImageField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdImageField GetForensicImageField(string field_name) {
    IdImageField ret = new IdImageField(csidenginePINVOKE.IdResult_GetForensicImageField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetForensicImageField(string field_name, IdImageField field) {
    csidenginePINVOKE.IdResult_SetForensicImageField(swigCPtr, field_name, IdImageField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveForensicImageField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveForensicImageField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdImageFieldsMapIterator ForensicImageFieldsBegin() {
    IdImageFieldsMapIterator ret = new IdImageFieldsMapIterator(csidenginePINVOKE.IdResult_ForensicImageFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdImageFieldsMapIterator ForensicImageFieldsEnd() {
    IdImageFieldsMapIterator ret = new IdImageFieldsMapIterator(csidenginePINVOKE.IdResult_ForensicImageFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetForensicAnimatedFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetForensicAnimatedFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasForensicAnimatedField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasForensicAnimatedField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdAnimatedField GetForensicAnimatedField(string field_name) {
    IdAnimatedField ret = new IdAnimatedField(csidenginePINVOKE.IdResult_GetForensicAnimatedField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetForensicAnimatedField(string field_name, IdAnimatedField field) {
    csidenginePINVOKE.IdResult_SetForensicAnimatedField(swigCPtr, field_name, IdAnimatedField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveForensicAnimatedField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveForensicAnimatedField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdAnimatedFieldsMapIterator ForensicAnimatedFieldsBegin() {
    IdAnimatedFieldsMapIterator ret = new IdAnimatedFieldsMapIterator(csidenginePINVOKE.IdResult_ForensicAnimatedFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdAnimatedFieldsMapIterator ForensicAnimatedFieldsEnd() {
    IdAnimatedFieldsMapIterator ret = new IdAnimatedFieldsMapIterator(csidenginePINVOKE.IdResult_ForensicAnimatedFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetForensicCheckFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetForensicCheckFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasForensicCheckField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasForensicCheckField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdCheckField GetForensicCheckField(string field_name) {
    IdCheckField ret = new IdCheckField(csidenginePINVOKE.IdResult_GetForensicCheckField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetForensicCheckField(string field_name, IdCheckField field) {
    csidenginePINVOKE.IdResult_SetForensicCheckField(swigCPtr, field_name, IdCheckField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveForensicCheckField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveForensicCheckField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdCheckFieldsMapIterator ForensicCheckFieldsBegin() {
    IdCheckFieldsMapIterator ret = new IdCheckFieldsMapIterator(csidenginePINVOKE.IdResult_ForensicCheckFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdCheckFieldsMapIterator ForensicCheckFieldsEnd() {
    IdCheckFieldsMapIterator ret = new IdCheckFieldsMapIterator(csidenginePINVOKE.IdResult_ForensicCheckFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetRawTextFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetRawTextFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasRawTextField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasRawTextField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdTextField GetRawTextField(string field_name) {
    IdTextField ret = new IdTextField(csidenginePINVOKE.IdResult_GetRawTextField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRawTextField(string field_name, IdTextField field) {
    csidenginePINVOKE.IdResult_SetRawTextField(swigCPtr, field_name, IdTextField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRawTextField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveRawTextField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdTextFieldsMapIterator RawTextFieldsBegin() {
    IdTextFieldsMapIterator ret = new IdTextFieldsMapIterator(csidenginePINVOKE.IdResult_RawTextFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdTextFieldsMapIterator RawTextFieldsEnd() {
    IdTextFieldsMapIterator ret = new IdTextFieldsMapIterator(csidenginePINVOKE.IdResult_RawTextFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetRawImageFieldsCount() {
    int ret = csidenginePINVOKE.IdResult_GetRawImageFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasRawImageField(string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasRawImageField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdImageField GetRawImageField(string field_name) {
    IdImageField ret = new IdImageField(csidenginePINVOKE.IdResult_GetRawImageField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRawImageField(string field_name, IdImageField field) {
    csidenginePINVOKE.IdResult_SetRawImageField(swigCPtr, field_name, IdImageField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRawImageField(string field_name) {
    csidenginePINVOKE.IdResult_RemoveRawImageField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdImageFieldsMapIterator RawImageFieldsBegin() {
    IdImageFieldsMapIterator ret = new IdImageFieldsMapIterator(csidenginePINVOKE.IdResult_RawImageFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IdImageFieldsMapIterator RawImageFieldsEnd() {
    IdImageFieldsMapIterator ret = new IdImageFieldsMapIterator(csidenginePINVOKE.IdResult_RawImageFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetCorrespondingRawFieldsCount(string field_name) {
    int ret = csidenginePINVOKE.IdResult_GetCorrespondingRawFieldsCount(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasCorrespondingRawField(string field_name, string raw_field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasCorrespondingRawField(swigCPtr, field_name, raw_field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsSetIterator CorrespondingRawFieldNamesBegin(string field_name) {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdResult_CorrespondingRawFieldNamesBegin(swigCPtr, field_name), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsSetIterator CorrespondingRawFieldNamesEnd(string field_name) {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdResult_CorrespondingRawFieldNamesEnd(swigCPtr, field_name), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetCorrespondingFieldsCount(string raw_field_name) {
    int ret = csidenginePINVOKE.IdResult_GetCorrespondingFieldsCount(swigCPtr, raw_field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasCorrespondingField(string raw_field_name, string field_name) {
    bool ret = csidenginePINVOKE.IdResult_HasCorrespondingField(swigCPtr, raw_field_name, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsSetIterator CorrespondingFieldNamesBegin(string raw_field_name) {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdResult_CorrespondingFieldNamesBegin(swigCPtr, raw_field_name), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsSetIterator CorrespondingFieldNamesEnd(string raw_field_name) {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdResult_CorrespondingFieldNamesEnd(swigCPtr, raw_field_name), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
