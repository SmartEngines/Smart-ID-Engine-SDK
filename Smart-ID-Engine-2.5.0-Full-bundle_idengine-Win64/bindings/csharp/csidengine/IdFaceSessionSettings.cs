//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdFaceSessionSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdFaceSessionSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdFaceSessionSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdFaceSessionSettings obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdFaceSessionSettings() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdFaceSessionSettings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual IdFaceSessionSettings Clone() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdFaceSessionSettings_Clone(swigCPtr);
    IdFaceSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFaceSessionSettings(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetOptionsCount() {
    int ret = csidenginePINVOKE.IdFaceSessionSettings_GetOptionsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetOption(string option_name) {
    string ret = csidenginePINVOKE.IdFaceSessionSettings_GetOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasOption(string option_name) {
    bool ret = csidenginePINVOKE.IdFaceSessionSettings_HasOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetOption(string option_name, string option_value) {
    csidenginePINVOKE.IdFaceSessionSettings_SetOption(swigCPtr, option_name, option_value);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveOption(string option_name) {
    csidenginePINVOKE.IdFaceSessionSettings_RemoveOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual StringsMapIterator OptionsBegin() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdFaceSessionSettings_OptionsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator OptionsEnd() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdFaceSessionSettings_OptionsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetSupportedLivenessInstructionsCount() {
    int ret = csidenginePINVOKE.IdFaceSessionSettings_GetSupportedLivenessInstructionsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasSupportedLivenessInstruction(string instruction) {
    bool ret = csidenginePINVOKE.IdFaceSessionSettings_HasSupportedLivenessInstruction(swigCPtr, instruction);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetLivenessInstructionDescription(string instruction) {
    string ret = csidenginePINVOKE.IdFaceSessionSettings_GetLivenessInstructionDescription(swigCPtr, instruction);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator SupportedLivenessInstructionsBegin() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdFaceSessionSettings_SupportedLivenessInstructionsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator SupportedLivenessInstructionsEnd() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdFaceSessionSettings_SupportedLivenessInstructionsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
