//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.common {

public class Image : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Image(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Image obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(Image obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Image() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cssecommonPINVOKE.delete_Image(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static int GetNumberOfPages(string image_filename) {
    int ret = cssecommonPINVOKE.Image_GetNumberOfPages(image_filename);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MutableString GetImagePageName(string image_filename, int page_number) {
    MutableString ret = new MutableString(cssecommonPINVOKE.Image_GetImagePageName(image_filename, page_number), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image CreateEmpty() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CreateEmpty();
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromFile(string image_filename, int page_number, Size max_size) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromFile__SWIG_0(image_filename, page_number, Size.getCPtr(max_size));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromFile(string image_filename, int page_number) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromFile__SWIG_1(image_filename, page_number);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromFile(string image_filename) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromFile__SWIG_2(image_filename);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromFileBuffer(byte[] data, int data_length, int page_number, Size max_size) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromFileBuffer__SWIG_0(data, data_length, page_number, Size.getCPtr(max_size));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromFileBuffer(byte[] data, int data_length, int page_number) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromFileBuffer__SWIG_1(data, data_length, page_number);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromFileBuffer(byte[] data, int data_length) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromFileBuffer__SWIG_2(data, data_length);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromBuffer(byte[] raw_data, int raw_data_length, int width, int height, int stride, int channels) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromBuffer(raw_data, raw_data_length, width, height, stride, channels);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromBufferExtended(byte[] raw_data, int raw_data_length, int width, int height, int stride, ImagePixelFormat pixel_format, int bytes_per_channel) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromBufferExtended(raw_data, raw_data_length, width, height, stride, (int)pixel_format, bytes_per_channel);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromYUVBuffer(byte[] yuv_data, int yuv_data_length, int width, int height) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromYUVBuffer(yuv_data, yuv_data_length, width, height);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromYUV(byte[] y_plane, int y_plane_length, byte[] u_plane, int u_plane_length, byte[] v_plane, int v_plane_length, YUVDimensions dimensions) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromYUV(y_plane, y_plane_length, u_plane, u_plane_length, v_plane, v_plane_length, YUVDimensions.getCPtr(dimensions));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromBase64Buffer(string base64_buffer, int page_number, Size max_size) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromBase64Buffer__SWIG_0(base64_buffer, page_number, Size.getCPtr(max_size));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromBase64Buffer(string base64_buffer, int page_number) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromBase64Buffer__SWIG_1(base64_buffer, page_number);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Image FromBase64Buffer(string base64_buffer) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_FromBase64Buffer__SWIG_2(base64_buffer);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetNumberOfLayers() {
    int ret = cssecommonPINVOKE.Image_GetNumberOfLayers(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image GetLayer(string name) {
    Image ret = new Image(cssecommonPINVOKE.Image_GetLayer(swigCPtr, name), false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image GetLayerPtr(string name) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_GetLayerPtr(swigCPtr, name);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ImagesMapIterator LayersBegin() {
    ImagesMapIterator ret = new ImagesMapIterator(cssecommonPINVOKE.Image_LayersBegin(swigCPtr), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ImagesMapIterator LayersEnd() {
    ImagesMapIterator ret = new ImagesMapIterator(cssecommonPINVOKE.Image_LayersEnd(swigCPtr), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasLayer(string name) {
    bool ret = cssecommonPINVOKE.Image_HasLayer(swigCPtr, name);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasLayers() {
    bool ret = cssecommonPINVOKE.Image_HasLayers(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void RemoveLayer(string name) {
    cssecommonPINVOKE.Image_RemoveLayer(swigCPtr, name);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveLayers() {
    cssecommonPINVOKE.Image_RemoveLayers(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetLayer(string name, Image image) {
    cssecommonPINVOKE.Image_SetLayer(swigCPtr, name, Image.getCPtr(image));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetLayerWithOwnership(string name, Image image) {
    cssecommonPINVOKE.Image_SetLayerWithOwnership(swigCPtr, name, Image.getCPtr(image));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneDeep() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneDeep(swigCPtr);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneShallow() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneShallow(swigCPtr);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Clear() {
    cssecommonPINVOKE.Image_Clear(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetRequiredBufferLength() {
    int ret = cssecommonPINVOKE.Image_GetRequiredBufferLength(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int CopyToBuffer(byte[] buffer, int buffer_length) {
    int ret = cssecommonPINVOKE.Image_CopyToBuffer(swigCPtr, buffer, buffer_length);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Save(string image_filename) {
    cssecommonPINVOKE.Image_Save(swigCPtr, image_filename);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetRequiredBase64BufferLength() {
    int ret = cssecommonPINVOKE.Image_GetRequiredBase64BufferLength(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int CopyBase64ToBuffer(string out_buffer, int buffer_length) {
    int ret = cssecommonPINVOKE.Image_CopyBase64ToBuffer(swigCPtr, out_buffer, buffer_length);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual MutableString GetBase64String() {
    MutableString ret = new MutableString(cssecommonPINVOKE.Image_GetBase64String(swigCPtr), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double EstimateFocusScore(double quantile) {
    double ret = cssecommonPINVOKE.Image_EstimateFocusScore__SWIG_0(swigCPtr, quantile);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double EstimateFocusScore() {
    double ret = cssecommonPINVOKE.Image_EstimateFocusScore__SWIG_1(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Resize(Size new_size) {
    cssecommonPINVOKE.Image_Resize(swigCPtr, Size.getCPtr(new_size));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneResized(Size new_size) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneResized(swigCPtr, Size.getCPtr(new_size));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Crop(Quadrangle quad) {
    cssecommonPINVOKE.Image_Crop__SWIG_0(swigCPtr, Quadrangle.getCPtr(quad));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneCropped(Quadrangle quad) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneCropped__SWIG_0(swigCPtr, Quadrangle.getCPtr(quad));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Crop(Quadrangle quad, Size size) {
    cssecommonPINVOKE.Image_Crop__SWIG_1(swigCPtr, Quadrangle.getCPtr(quad), Size.getCPtr(size));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneCropped(Quadrangle quad, Size size) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneCropped__SWIG_1(swigCPtr, Quadrangle.getCPtr(quad), Size.getCPtr(size));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Crop(Rectangle rect) {
    cssecommonPINVOKE.Image_Crop__SWIG_2(swigCPtr, Rectangle.getCPtr(rect));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneCropped(Rectangle rect) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneCropped__SWIG_2(swigCPtr, Rectangle.getCPtr(rect));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneCroppedShallow(Rectangle rect) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneCroppedShallow(swigCPtr, Rectangle.getCPtr(rect));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Mask(Rectangle rect, int pixel_expand, double pixel_density) {
    cssecommonPINVOKE.Image_Mask__SWIG_0(swigCPtr, Rectangle.getCPtr(rect), pixel_expand, pixel_density);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Mask(Rectangle rect, int pixel_expand) {
    cssecommonPINVOKE.Image_Mask__SWIG_1(swigCPtr, Rectangle.getCPtr(rect), pixel_expand);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Mask(Rectangle rect) {
    cssecommonPINVOKE.Image_Mask__SWIG_2(swigCPtr, Rectangle.getCPtr(rect));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneMasked(Rectangle rect, int pixel_expand) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneMasked__SWIG_0(swigCPtr, Rectangle.getCPtr(rect), pixel_expand);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneMasked(Rectangle rect) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneMasked__SWIG_1(swigCPtr, Rectangle.getCPtr(rect));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Mask(Quadrangle quad, int pixel_expand, double pixel_density) {
    cssecommonPINVOKE.Image_Mask__SWIG_3(swigCPtr, Quadrangle.getCPtr(quad), pixel_expand, pixel_density);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Mask(Quadrangle quad, int pixel_expand) {
    cssecommonPINVOKE.Image_Mask__SWIG_4(swigCPtr, Quadrangle.getCPtr(quad), pixel_expand);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Mask(Quadrangle quad) {
    cssecommonPINVOKE.Image_Mask__SWIG_5(swigCPtr, Quadrangle.getCPtr(quad));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneMasked(Quadrangle quad, int pixel_expand) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneMasked__SWIG_2(swigCPtr, Quadrangle.getCPtr(quad), pixel_expand);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneMasked(Quadrangle quad) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneMasked__SWIG_3(swigCPtr, Quadrangle.getCPtr(quad));
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Fill(Rectangle rect, int ch1, int ch2, int ch3, int ch4, int pixel_expand) {
    cssecommonPINVOKE.Image_Fill__SWIG_0(swigCPtr, Rectangle.getCPtr(rect), ch1, ch2, ch3, ch4, pixel_expand);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Fill(Rectangle rect, int ch1, int ch2, int ch3, int ch4) {
    cssecommonPINVOKE.Image_Fill__SWIG_1(swigCPtr, Rectangle.getCPtr(rect), ch1, ch2, ch3, ch4);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Fill(Rectangle rect, int ch1, int ch2, int ch3) {
    cssecommonPINVOKE.Image_Fill__SWIG_2(swigCPtr, Rectangle.getCPtr(rect), ch1, ch2, ch3);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Fill(Rectangle rect, int ch1, int ch2) {
    cssecommonPINVOKE.Image_Fill__SWIG_3(swigCPtr, Rectangle.getCPtr(rect), ch1, ch2);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Fill(Rectangle rect, int ch1) {
    cssecommonPINVOKE.Image_Fill__SWIG_4(swigCPtr, Rectangle.getCPtr(rect), ch1);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneFilled(Rectangle rect, int ch1, int ch2, int ch3, int ch4, int pixel_expand) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_0(swigCPtr, Rectangle.getCPtr(rect), ch1, ch2, ch3, ch4, pixel_expand);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneFilled(Rectangle rect, int ch1, int ch2, int ch3, int ch4) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_1(swigCPtr, Rectangle.getCPtr(rect), ch1, ch2, ch3, ch4);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneFilled(Rectangle rect, int ch1, int ch2, int ch3) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_2(swigCPtr, Rectangle.getCPtr(rect), ch1, ch2, ch3);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneFilled(Rectangle rect, int ch1, int ch2) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_3(swigCPtr, Rectangle.getCPtr(rect), ch1, ch2);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneFilled(Rectangle rect, int ch1) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_4(swigCPtr, Rectangle.getCPtr(rect), ch1);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Fill(Quadrangle quad, int ch1, int ch2, int ch3, int ch4, int pixel_expand) {
    cssecommonPINVOKE.Image_Fill__SWIG_5(swigCPtr, Quadrangle.getCPtr(quad), ch1, ch2, ch3, ch4, pixel_expand);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Fill(Quadrangle quad, int ch1, int ch2, int ch3, int ch4) {
    cssecommonPINVOKE.Image_Fill__SWIG_6(swigCPtr, Quadrangle.getCPtr(quad), ch1, ch2, ch3, ch4);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Fill(Quadrangle quad, int ch1, int ch2, int ch3) {
    cssecommonPINVOKE.Image_Fill__SWIG_7(swigCPtr, Quadrangle.getCPtr(quad), ch1, ch2, ch3);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Fill(Quadrangle quad, int ch1, int ch2) {
    cssecommonPINVOKE.Image_Fill__SWIG_8(swigCPtr, Quadrangle.getCPtr(quad), ch1, ch2);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Fill(Quadrangle quad, int ch1) {
    cssecommonPINVOKE.Image_Fill__SWIG_9(swigCPtr, Quadrangle.getCPtr(quad), ch1);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneFilled(Quadrangle quad, int ch1, int ch2, int ch3, int ch4, int pixel_expand) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_5(swigCPtr, Quadrangle.getCPtr(quad), ch1, ch2, ch3, ch4, pixel_expand);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneFilled(Quadrangle quad, int ch1, int ch2, int ch3, int ch4) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_6(swigCPtr, Quadrangle.getCPtr(quad), ch1, ch2, ch3, ch4);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneFilled(Quadrangle quad, int ch1, int ch2, int ch3) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_7(swigCPtr, Quadrangle.getCPtr(quad), ch1, ch2, ch3);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneFilled(Quadrangle quad, int ch1, int ch2) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_8(swigCPtr, Quadrangle.getCPtr(quad), ch1, ch2);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Image CloneFilled(Quadrangle quad, int ch1) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFilled__SWIG_9(swigCPtr, Quadrangle.getCPtr(quad), ch1);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void FlipVertical() {
    cssecommonPINVOKE.Image_FlipVertical(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneFlippedVertical() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFlippedVertical(swigCPtr);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void FlipHorizontal() {
    cssecommonPINVOKE.Image_FlipHorizontal(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneFlippedHorizontal() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneFlippedHorizontal(swigCPtr);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Rotate90(int times) {
    cssecommonPINVOKE.Image_Rotate90(swigCPtr, times);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneRotated90(int times) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneRotated90(swigCPtr, times);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AverageChannels() {
    cssecommonPINVOKE.Image_AverageChannels(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneAveragedChannels() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneAveragedChannels(swigCPtr);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Invert() {
    cssecommonPINVOKE.Image_Invert(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Image CloneInverted() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.Image_CloneInverted(swigCPtr);
    Image ret = (cPtr == global::System.IntPtr.Zero) ? null : new Image(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetWidth() {
    int ret = cssecommonPINVOKE.Image_GetWidth(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetHeight() {
    int ret = cssecommonPINVOKE.Image_GetHeight(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Size GetSize() {
    Size ret = new Size(cssecommonPINVOKE.Image_GetSize(swigCPtr), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetStride() {
    int ret = cssecommonPINVOKE.Image_GetStride(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetChannels() {
    int ret = cssecommonPINVOKE.Image_GetChannels(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsMemoryOwner() {
    bool ret = cssecommonPINVOKE.Image_IsMemoryOwner(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ForceMemoryOwner() {
    cssecommonPINVOKE.Image_ForceMemoryOwner(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Serialize(Serializer serializer) {
    cssecommonPINVOKE.Image_Serialize(swigCPtr, Serializer.getCPtr(serializer));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
