//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdFeedback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdFeedback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdFeedback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdFeedback obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdFeedback() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdFeedback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void FeedbackReceived(IdFeedbackContainer feedback_container) {
    csidenginePINVOKE.IdFeedback_FeedbackReceived(swigCPtr, IdFeedbackContainer.getCPtr(feedback_container));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void TemplateDetectionResultReceived(IdTemplateDetectionResult detection_result) {
    csidenginePINVOKE.IdFeedback_TemplateDetectionResultReceived(swigCPtr, IdTemplateDetectionResult.getCPtr(detection_result));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void TemplateSegmentationResultReceived(IdTemplateSegmentationResult segmentation_result) {
    csidenginePINVOKE.IdFeedback_TemplateSegmentationResultReceived(swigCPtr, IdTemplateSegmentationResult.getCPtr(segmentation_result));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ResultReceived(IdResult result_received) {
    csidenginePINVOKE.IdFeedback_ResultReceived(swigCPtr, IdResult.getCPtr(result_received));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SessionEnded() {
    csidenginePINVOKE.IdFeedback_SessionEnded(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdFeedback() : this(csidenginePINVOKE.new_IdFeedback(), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("FeedbackReceived", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIdFeedback_0(SwigDirectorMethodFeedbackReceived);
    if (SwigDerivedClassHasMethod("TemplateDetectionResultReceived", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateIdFeedback_1(SwigDirectorMethodTemplateDetectionResultReceived);
    if (SwigDerivedClassHasMethod("TemplateSegmentationResultReceived", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateIdFeedback_2(SwigDirectorMethodTemplateSegmentationResultReceived);
    if (SwigDerivedClassHasMethod("ResultReceived", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateIdFeedback_3(SwigDirectorMethodResultReceived);
    if (SwigDerivedClassHasMethod("SessionEnded", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateIdFeedback_4(SwigDirectorMethodSessionEnded);
    csidenginePINVOKE.IdFeedback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(IdFeedback))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private void SwigDirectorMethodFeedbackReceived(global::System.IntPtr feedback_container) {
    FeedbackReceived(new IdFeedbackContainer(feedback_container, false));
  }

  private void SwigDirectorMethodTemplateDetectionResultReceived(global::System.IntPtr detection_result) {
    TemplateDetectionResultReceived(new IdTemplateDetectionResult(detection_result, false));
  }

  private void SwigDirectorMethodTemplateSegmentationResultReceived(global::System.IntPtr segmentation_result) {
    TemplateSegmentationResultReceived(new IdTemplateSegmentationResult(segmentation_result, false));
  }

  private void SwigDirectorMethodResultReceived(global::System.IntPtr result_received) {
    ResultReceived(new IdResult(result_received, false));
  }

  private void SwigDirectorMethodSessionEnded() {
    SessionEnded();
  }

  public delegate void SwigDelegateIdFeedback_0(global::System.IntPtr feedback_container);
  public delegate void SwigDelegateIdFeedback_1(global::System.IntPtr detection_result);
  public delegate void SwigDelegateIdFeedback_2(global::System.IntPtr segmentation_result);
  public delegate void SwigDelegateIdFeedback_3(global::System.IntPtr result_received);
  public delegate void SwigDelegateIdFeedback_4();

  private SwigDelegateIdFeedback_0 swigDelegate0;
  private SwigDelegateIdFeedback_1 swigDelegate1;
  private SwigDelegateIdFeedback_2 swigDelegate2;
  private SwigDelegateIdFeedback_3 swigDelegate3;
  private SwigDelegateIdFeedback_4 swigDelegate4;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(IdFeedbackContainer) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(IdTemplateDetectionResult) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(IdTemplateSegmentationResult) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(IdResult) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
}

}
