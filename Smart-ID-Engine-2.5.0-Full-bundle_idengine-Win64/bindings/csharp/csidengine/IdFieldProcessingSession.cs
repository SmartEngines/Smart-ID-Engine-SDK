//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdFieldProcessingSession : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdFieldProcessingSession(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdFieldProcessingSession obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdFieldProcessingSession obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdFieldProcessingSession() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdFieldProcessingSession(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual string GetActivationRequest() {
    string ret = csidenginePINVOKE.IdFieldProcessingSession_GetActivationRequest(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Activate(string activation_response) {
    csidenginePINVOKE.IdFieldProcessingSession_Activate(swigCPtr, activation_response);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool IsActivated() {
    bool ret = csidenginePINVOKE.IdFieldProcessingSession_IsActivated(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Process() {
    csidenginePINVOKE.IdFieldProcessingSession_Process(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetTextFieldsCount() {
    int ret = csidenginePINVOKE.IdFieldProcessingSession_GetTextFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasTextField(string field_name) {
    bool ret = csidenginePINVOKE.IdFieldProcessingSession_HasTextField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdTextField GetTextField(string field_name) {
    IdTextField ret = new IdTextField(csidenginePINVOKE.IdFieldProcessingSession_GetTextField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTextField(string field_name, IdTextField field) {
    csidenginePINVOKE.IdFieldProcessingSession_SetTextField(swigCPtr, field_name, IdTextField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveTextField(string field_name) {
    csidenginePINVOKE.IdFieldProcessingSession_RemoveTextField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IdTextFieldsMapIterator TextFieldsBegin() {
    IdTextFieldsMapIterator ret = new IdTextFieldsMapIterator(csidenginePINVOKE.IdFieldProcessingSession_TextFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdTextFieldsMapIterator TextFieldsEnd() {
    IdTextFieldsMapIterator ret = new IdTextFieldsMapIterator(csidenginePINVOKE.IdFieldProcessingSession_TextFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetImageFieldsCount() {
    int ret = csidenginePINVOKE.IdFieldProcessingSession_GetImageFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasImageField(string field_name) {
    bool ret = csidenginePINVOKE.IdFieldProcessingSession_HasImageField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdImageField GetImageField(string field_name) {
    IdImageField ret = new IdImageField(csidenginePINVOKE.IdFieldProcessingSession_GetImageField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetImageField(string field_name, IdImageField field) {
    csidenginePINVOKE.IdFieldProcessingSession_SetImageField(swigCPtr, field_name, IdImageField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveImageField(string field_name) {
    csidenginePINVOKE.IdFieldProcessingSession_RemoveImageField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IdImageFieldsMapIterator ImageFieldsBegin() {
    IdImageFieldsMapIterator ret = new IdImageFieldsMapIterator(csidenginePINVOKE.IdFieldProcessingSession_ImageFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdImageFieldsMapIterator ImageFieldsEnd() {
    IdImageFieldsMapIterator ret = new IdImageFieldsMapIterator(csidenginePINVOKE.IdFieldProcessingSession_ImageFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetAnimatedFieldsCount() {
    int ret = csidenginePINVOKE.IdFieldProcessingSession_GetAnimatedFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasAnimatedField(string field_name) {
    bool ret = csidenginePINVOKE.IdFieldProcessingSession_HasAnimatedField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdAnimatedField GetAnimatedField(string field_name) {
    IdAnimatedField ret = new IdAnimatedField(csidenginePINVOKE.IdFieldProcessingSession_GetAnimatedField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetAnimatedField(string field_name, IdAnimatedField field) {
    csidenginePINVOKE.IdFieldProcessingSession_SetAnimatedField(swigCPtr, field_name, IdAnimatedField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveAnimatedField(string field_name) {
    csidenginePINVOKE.IdFieldProcessingSession_RemoveAnimatedField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IdAnimatedFieldsMapIterator AnimatedFieldsBegin() {
    IdAnimatedFieldsMapIterator ret = new IdAnimatedFieldsMapIterator(csidenginePINVOKE.IdFieldProcessingSession_AnimatedFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdAnimatedFieldsMapIterator AnimatedFieldsEnd() {
    IdAnimatedFieldsMapIterator ret = new IdAnimatedFieldsMapIterator(csidenginePINVOKE.IdFieldProcessingSession_AnimatedFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetCheckFieldsCount() {
    int ret = csidenginePINVOKE.IdFieldProcessingSession_GetCheckFieldsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasCheckField(string field_name) {
    bool ret = csidenginePINVOKE.IdFieldProcessingSession_HasCheckField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdCheckField GetCheckField(string field_name) {
    IdCheckField ret = new IdCheckField(csidenginePINVOKE.IdFieldProcessingSession_GetCheckField(swigCPtr, field_name), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCheckField(string field_name, IdCheckField field) {
    csidenginePINVOKE.IdFieldProcessingSession_SetCheckField(swigCPtr, field_name, IdCheckField.getCPtr(field));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveCheckField(string field_name) {
    csidenginePINVOKE.IdFieldProcessingSession_RemoveCheckField(swigCPtr, field_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual IdCheckFieldsMapIterator CheckFieldsBegin() {
    IdCheckFieldsMapIterator ret = new IdCheckFieldsMapIterator(csidenginePINVOKE.IdFieldProcessingSession_CheckFieldsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdCheckFieldsMapIterator CheckFieldsEnd() {
    IdCheckFieldsMapIterator ret = new IdCheckFieldsMapIterator(csidenginePINVOKE.IdFieldProcessingSession_CheckFieldsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Reset() {
    csidenginePINVOKE.IdFieldProcessingSession_Reset(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
