//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.common {

public class ProjectiveTransform : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ProjectiveTransform(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ProjectiveTransform obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(ProjectiveTransform obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ProjectiveTransform() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cssecommonPINVOKE.delete_ProjectiveTransform(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool CanCreate(Quadrangle src_quad, Quadrangle dst_quad) {
    bool ret = cssecommonPINVOKE.ProjectiveTransform_CanCreate__SWIG_0(Quadrangle.getCPtr(src_quad), Quadrangle.getCPtr(dst_quad));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CanCreate(Quadrangle src_quad, Size dst_size) {
    bool ret = cssecommonPINVOKE.ProjectiveTransform_CanCreate__SWIG_1(Quadrangle.getCPtr(src_quad), Size.getCPtr(dst_size));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProjectiveTransform Create() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.ProjectiveTransform_Create__SWIG_0();
    ProjectiveTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProjectiveTransform(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProjectiveTransform Create(Quadrangle src_quad, Quadrangle dst_quad) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.ProjectiveTransform_Create__SWIG_1(Quadrangle.getCPtr(src_quad), Quadrangle.getCPtr(dst_quad));
    ProjectiveTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProjectiveTransform(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ProjectiveTransform Create(Quadrangle src_quad, Size dst_size) {
    global::System.IntPtr cPtr = cssecommonPINVOKE.ProjectiveTransform_Create__SWIG_2(Quadrangle.getCPtr(src_quad), Size.getCPtr(dst_size));
    ProjectiveTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProjectiveTransform(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ProjectiveTransform Clone() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.ProjectiveTransform_Clone(swigCPtr);
    ProjectiveTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProjectiveTransform(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Point TransformPoint(Point p) {
    Point ret = new Point(cssecommonPINVOKE.ProjectiveTransform_TransformPoint(swigCPtr, Point.getCPtr(p)), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Quadrangle TransformQuad(Quadrangle q) {
    Quadrangle ret = new Quadrangle(cssecommonPINVOKE.ProjectiveTransform_TransformQuad(swigCPtr, Quadrangle.getCPtr(q)), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Polygon TransformPolygon(Polygon poly) {
    Polygon ret = new Polygon(cssecommonPINVOKE.ProjectiveTransform_TransformPolygon(swigCPtr, Polygon.getCPtr(poly)), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsInvertable() {
    bool ret = cssecommonPINVOKE.ProjectiveTransform_IsInvertable(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Invert() {
    cssecommonPINVOKE.ProjectiveTransform_Invert(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ProjectiveTransform CloneInverted() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.ProjectiveTransform_CloneInverted(swigCPtr);
    ProjectiveTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProjectiveTransform(cPtr, true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Serialize(Serializer serializer) {
    cssecommonPINVOKE.ProjectiveTransform_Serialize(swigCPtr, Serializer.getCPtr(serializer));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
