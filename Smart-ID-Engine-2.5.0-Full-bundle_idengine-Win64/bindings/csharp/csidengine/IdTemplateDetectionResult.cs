//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdTemplateDetectionResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdTemplateDetectionResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdTemplateDetectionResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdTemplateDetectionResult obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdTemplateDetectionResult() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdTemplateDetectionResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IdTemplateDetectionResult(string tpl_name, Quadrangle quadrangle, bool is_accepted, double confidence, Size standard_size) : this(csidenginePINVOKE.new_IdTemplateDetectionResult__SWIG_0(tpl_name, Quadrangle.getCPtr(quadrangle), is_accepted, confidence, Size.getCPtr(standard_size)), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdTemplateDetectionResult(string tpl_name, Quadrangle quadrangle, bool is_accepted, double confidence) : this(csidenginePINVOKE.new_IdTemplateDetectionResult__SWIG_1(tpl_name, Quadrangle.getCPtr(quadrangle), is_accepted, confidence), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdTemplateDetectionResult(string tpl_name, Quadrangle quadrangle, bool is_accepted) : this(csidenginePINVOKE.new_IdTemplateDetectionResult__SWIG_2(tpl_name, Quadrangle.getCPtr(quadrangle), is_accepted), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdTemplateDetectionResult(string tpl_name, Quadrangle quadrangle) : this(csidenginePINVOKE.new_IdTemplateDetectionResult__SWIG_3(tpl_name, Quadrangle.getCPtr(quadrangle)), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdTemplateDetectionResult(IdTemplateDetectionResult copy) : this(csidenginePINVOKE.new_IdTemplateDetectionResult__SWIG_4(IdTemplateDetectionResult.getCPtr(copy)), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetTemplateName() {
    string ret = csidenginePINVOKE.IdTemplateDetectionResult_GetTemplateName(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTemplateName(string name) {
    csidenginePINVOKE.IdTemplateDetectionResult_SetTemplateName(swigCPtr, name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quadrangle GetQuadrangle() {
    Quadrangle ret = new Quadrangle(csidenginePINVOKE.IdTemplateDetectionResult_GetQuadrangle(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetQuadrangle(Quadrangle quadrangle) {
    csidenginePINVOKE.IdTemplateDetectionResult_SetQuadrangle(swigCPtr, Quadrangle.getCPtr(quadrangle));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetIsAccepted() {
    bool ret = csidenginePINVOKE.IdTemplateDetectionResult_GetIsAccepted(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetIsAccepted(bool is_accepted) {
    csidenginePINVOKE.IdTemplateDetectionResult_SetIsAccepted(swigCPtr, is_accepted);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetConfidence() {
    double ret = csidenginePINVOKE.IdTemplateDetectionResult_GetConfidence(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetConfidence(double confidence) {
    csidenginePINVOKE.IdTemplateDetectionResult_SetConfidence(swigCPtr, confidence);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Size GetStandardSize() {
    Size ret = new Size(csidenginePINVOKE.IdTemplateDetectionResult_GetStandardSize(swigCPtr), false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStandardSize(Size standard_size) {
    csidenginePINVOKE.IdTemplateDetectionResult_SetStandardSize(swigCPtr, Size.getCPtr(standard_size));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetAttributesCount() {
    int ret = csidenginePINVOKE.IdTemplateDetectionResult_GetAttributesCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetAttribute(string attr_name) {
    string ret = csidenginePINVOKE.IdTemplateDetectionResult_GetAttribute(swigCPtr, attr_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasAttribute(string attr_name) {
    bool ret = csidenginePINVOKE.IdTemplateDetectionResult_HasAttribute(swigCPtr, attr_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAttribute(string attr_name, string attr_value) {
    csidenginePINVOKE.IdTemplateDetectionResult_SetAttribute(swigCPtr, attr_name, attr_value);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAttribute(string attr_name) {
    csidenginePINVOKE.IdTemplateDetectionResult_RemoveAttribute(swigCPtr, attr_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringsMapIterator AttributesBegin() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdTemplateDetectionResult_AttributesBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsMapIterator AttributesEnd() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdTemplateDetectionResult_AttributesEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
