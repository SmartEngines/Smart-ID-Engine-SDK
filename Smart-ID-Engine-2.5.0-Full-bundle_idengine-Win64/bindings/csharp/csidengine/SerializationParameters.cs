//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.common {

public class SerializationParameters : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SerializationParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SerializationParameters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(SerializationParameters obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SerializationParameters() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cssecommonPINVOKE.delete_SerializationParameters(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SerializationParameters() : this(cssecommonPINVOKE.new_SerializationParameters__SWIG_0(), true) {
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public SerializationParameters(SerializationParameters copy) : this(cssecommonPINVOKE.new_SerializationParameters__SWIG_1(SerializationParameters.getCPtr(copy)), true) {
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasIgnoredObjectType(string object_type) {
    bool ret = cssecommonPINVOKE.SerializationParameters_HasIgnoredObjectType(swigCPtr, object_type);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddIgnoredObjectType(string object_type) {
    cssecommonPINVOKE.SerializationParameters_AddIgnoredObjectType(swigCPtr, object_type);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveIgnoredObjectType(string object_type) {
    cssecommonPINVOKE.SerializationParameters_RemoveIgnoredObjectType(swigCPtr, object_type);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringsSetIterator IgnoredObjectTypesBegin() {
    StringsSetIterator ret = new StringsSetIterator(cssecommonPINVOKE.SerializationParameters_IgnoredObjectTypesBegin(swigCPtr), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsSetIterator IgnoredObjectTypesEnd() {
    StringsSetIterator ret = new StringsSetIterator(cssecommonPINVOKE.SerializationParameters_IgnoredObjectTypesEnd(swigCPtr), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasIgnoredKey(string key) {
    bool ret = cssecommonPINVOKE.SerializationParameters_HasIgnoredKey(swigCPtr, key);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddIgnoredKey(string key) {
    cssecommonPINVOKE.SerializationParameters_AddIgnoredKey(swigCPtr, key);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveIgnoredKey(string key) {
    cssecommonPINVOKE.SerializationParameters_RemoveIgnoredKey(swigCPtr, key);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringsSetIterator IgnoredKeysBegin() {
    StringsSetIterator ret = new StringsSetIterator(cssecommonPINVOKE.SerializationParameters_IgnoredKeysBegin(swigCPtr), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsSetIterator IgnoredKeysEnd() {
    StringsSetIterator ret = new StringsSetIterator(cssecommonPINVOKE.SerializationParameters_IgnoredKeysEnd(swigCPtr), true);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
