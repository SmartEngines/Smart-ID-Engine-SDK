//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdEngine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdEngine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdEngine obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdEngine() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual IdSessionSettings CreateSessionSettings() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateSessionSettings(swigCPtr);
    IdSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdSessionSettings(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdSession SpawnSession(IdSessionSettings settings, string signature, IdFeedback feedback_reporter) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnSession__SWIG_0(swigCPtr, IdSessionSettings.getCPtr(settings), signature, IdFeedback.getCPtr(feedback_reporter));
    IdSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdSession SpawnSession(IdSessionSettings settings, string signature) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnSession__SWIG_1(swigCPtr, IdSessionSettings.getCPtr(settings), signature);
    IdSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFileAnalysisSessionSettings CreateFileAnalysisSessionSettings() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateFileAnalysisSessionSettings(swigCPtr);
    IdFileAnalysisSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFileAnalysisSessionSettings(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFileAnalysisSession SpawnFileAnalysisSession(IdFileAnalysisSessionSettings settings, string signature) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnFileAnalysisSession(swigCPtr, IdFileAnalysisSessionSettings.getCPtr(settings), signature);
    IdFileAnalysisSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFileAnalysisSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFaceSessionSettings CreateFaceSessionSettings() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateFaceSessionSettings(swigCPtr);
    IdFaceSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFaceSessionSettings(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFaceSession SpawnFaceSession(IdFaceSessionSettings settings, string signature, IdFaceFeedback feedback_reporter) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnFaceSession__SWIG_0(swigCPtr, IdFaceSessionSettings.getCPtr(settings), signature, IdFaceFeedback.getCPtr(feedback_reporter));
    IdFaceSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFaceSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFaceSession SpawnFaceSession(IdFaceSessionSettings settings, string signature) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnFaceSession__SWIG_1(swigCPtr, IdFaceSessionSettings.getCPtr(settings), signature);
    IdFaceSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFaceSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFieldProcessingSessionSettings CreateFieldProcessingSessionSettings() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateFieldProcessingSessionSettings(swigCPtr);
    IdFieldProcessingSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFieldProcessingSessionSettings(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdFieldProcessingSession SpawnFieldProcessingSession(IdFieldProcessingSessionSettings settings, string signature) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnFieldProcessingSession(swigCPtr, IdFieldProcessingSessionSettings.getCPtr(settings), signature);
    IdFieldProcessingSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFieldProcessingSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdVideoAuthenticationSessionSettings CreateVideoAuthenticationSessionSettings() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateVideoAuthenticationSessionSettings(swigCPtr);
    IdVideoAuthenticationSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdVideoAuthenticationSessionSettings(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdVideoAuthenticationSession SpawnVideoAuthenticationSession(IdVideoAuthenticationSessionSettings settings, string signature, IdVideoAuthenticationCallbacks video_authentication_callbacks, IdFeedback feedback_reporter, IdFaceFeedback face_feedback_reporter) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnVideoAuthenticationSession__SWIG_0(swigCPtr, IdVideoAuthenticationSessionSettings.getCPtr(settings), signature, IdVideoAuthenticationCallbacks.getCPtr(video_authentication_callbacks), IdFeedback.getCPtr(feedback_reporter), IdFaceFeedback.getCPtr(face_feedback_reporter));
    IdVideoAuthenticationSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdVideoAuthenticationSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdVideoAuthenticationSession SpawnVideoAuthenticationSession(IdVideoAuthenticationSessionSettings settings, string signature, IdVideoAuthenticationCallbacks video_authentication_callbacks, IdFeedback feedback_reporter) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnVideoAuthenticationSession__SWIG_1(swigCPtr, IdVideoAuthenticationSessionSettings.getCPtr(settings), signature, IdVideoAuthenticationCallbacks.getCPtr(video_authentication_callbacks), IdFeedback.getCPtr(feedback_reporter));
    IdVideoAuthenticationSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdVideoAuthenticationSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdVideoAuthenticationSession SpawnVideoAuthenticationSession(IdVideoAuthenticationSessionSettings settings, string signature, IdVideoAuthenticationCallbacks video_authentication_callbacks) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnVideoAuthenticationSession__SWIG_2(swigCPtr, IdVideoAuthenticationSessionSettings.getCPtr(settings), signature, IdVideoAuthenticationCallbacks.getCPtr(video_authentication_callbacks));
    IdVideoAuthenticationSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdVideoAuthenticationSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IdVideoAuthenticationSession SpawnVideoAuthenticationSession(IdVideoAuthenticationSessionSettings settings, string signature) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_SpawnVideoAuthenticationSession__SWIG_3(swigCPtr, IdVideoAuthenticationSessionSettings.getCPtr(settings), signature);
    IdVideoAuthenticationSession ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdVideoAuthenticationSession(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine Create(string config_path, bool lazy_configuration, int init_concurrency, bool delayed_initialization) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_Create__SWIG_0(config_path, lazy_configuration, init_concurrency, delayed_initialization);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine Create(string config_path, bool lazy_configuration, int init_concurrency) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_Create__SWIG_1(config_path, lazy_configuration, init_concurrency);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine Create(string config_path, bool lazy_configuration) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_Create__SWIG_2(config_path, lazy_configuration);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine Create(string config_path) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_Create__SWIG_3(config_path);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine Create(byte[] config_data, int config_data_length, bool lazy_configuration, int init_concurrency, bool delayed_initialization) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_Create__SWIG_4(config_data, config_data_length, lazy_configuration, init_concurrency, delayed_initialization);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine Create(byte[] config_data, int config_data_length, bool lazy_configuration, int init_concurrency) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_Create__SWIG_5(config_data, config_data_length, lazy_configuration, init_concurrency);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine Create(byte[] config_data, int config_data_length, bool lazy_configuration) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_Create__SWIG_6(config_data, config_data_length, lazy_configuration);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine Create(byte[] config_data, int config_data_length) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_Create__SWIG_7(config_data, config_data_length);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine CreateFromEmbeddedBundle(bool lazy_configuration, int init_concurrency, bool delayed_initialization) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateFromEmbeddedBundle__SWIG_0(lazy_configuration, init_concurrency, delayed_initialization);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine CreateFromEmbeddedBundle(bool lazy_configuration, int init_concurrency) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateFromEmbeddedBundle__SWIG_1(lazy_configuration, init_concurrency);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine CreateFromEmbeddedBundle(bool lazy_configuration) {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateFromEmbeddedBundle__SWIG_2(lazy_configuration);
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static IdEngine CreateFromEmbeddedBundle() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdEngine_CreateFromEmbeddedBundle__SWIG_3();
    IdEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdEngine(cPtr, false);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetVersion() {
    string ret = csidenginePINVOKE.IdEngine_GetVersion();
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
