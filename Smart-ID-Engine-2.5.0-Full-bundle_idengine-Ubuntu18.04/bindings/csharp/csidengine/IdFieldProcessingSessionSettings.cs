//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdFieldProcessingSessionSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdFieldProcessingSessionSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdFieldProcessingSessionSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdFieldProcessingSessionSettings obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdFieldProcessingSessionSettings() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdFieldProcessingSessionSettings(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual IdFieldProcessingSessionSettings Clone() {
    global::System.IntPtr cPtr = csidenginePINVOKE.IdFieldProcessingSessionSettings_Clone(swigCPtr);
    IdFieldProcessingSessionSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new IdFieldProcessingSessionSettings(cPtr, true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetSupportedFieldProcessorsCount() {
    int ret = csidenginePINVOKE.IdFieldProcessingSessionSettings_GetSupportedFieldProcessorsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasSupportedFieldProcessor(string field_processor_name) {
    bool ret = csidenginePINVOKE.IdFieldProcessingSessionSettings_HasSupportedFieldProcessor(swigCPtr, field_processor_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator SupportedFieldProcessorsBegin() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdFieldProcessingSessionSettings_SupportedFieldProcessorsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsSetIterator SupportedFieldProcessorsEnd() {
    StringsSetIterator ret = new StringsSetIterator(csidenginePINVOKE.IdFieldProcessingSessionSettings_SupportedFieldProcessorsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetCurrentFieldProcessor() {
    string ret = csidenginePINVOKE.IdFieldProcessingSessionSettings_GetCurrentFieldProcessor(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCurrentFieldProcessor(string field_processor_name) {
    csidenginePINVOKE.IdFieldProcessingSessionSettings_SetCurrentFieldProcessor(swigCPtr, field_processor_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetOptionsCount() {
    int ret = csidenginePINVOKE.IdFieldProcessingSessionSettings_GetOptionsCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetOption(string option_name) {
    string ret = csidenginePINVOKE.IdFieldProcessingSessionSettings_GetOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasOption(string option_name) {
    bool ret = csidenginePINVOKE.IdFieldProcessingSessionSettings_HasOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetOption(string option_name, string option_value) {
    csidenginePINVOKE.IdFieldProcessingSessionSettings_SetOption(swigCPtr, option_name, option_value);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveOption(string option_name) {
    csidenginePINVOKE.IdFieldProcessingSessionSettings_RemoveOption(swigCPtr, option_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual StringsMapIterator OptionsBegin() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdFieldProcessingSessionSettings_OptionsBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual StringsMapIterator OptionsEnd() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdFieldProcessingSessionSettings_OptionsEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
