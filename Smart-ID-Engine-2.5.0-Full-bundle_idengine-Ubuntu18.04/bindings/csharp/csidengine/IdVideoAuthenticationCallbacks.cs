//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdVideoAuthenticationCallbacks : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdVideoAuthenticationCallbacks(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdVideoAuthenticationCallbacks obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdVideoAuthenticationCallbacks obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdVideoAuthenticationCallbacks() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdVideoAuthenticationCallbacks(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void InstructionReceived(int index, IdVideoAuthenticationInstruction instruction) {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_InstructionReceived(swigCPtr, index, IdVideoAuthenticationInstruction.getCPtr(instruction));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AnomalyRegistered(int index, IdVideoAuthenticationAnomaly anomaly) {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_AnomalyRegistered(swigCPtr, index, IdVideoAuthenticationAnomaly.getCPtr(anomaly));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DocumentResultUpdated(IdResult document_result) {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_DocumentResultUpdated(swigCPtr, IdResult.getCPtr(document_result));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FaceMatchingResultUpdated(IdFaceSimilarityResult face_matching_result) {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_FaceMatchingResultUpdated(swigCPtr, IdFaceSimilarityResult.getCPtr(face_matching_result));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FaceLivenessResultUpdated(IdFaceLivenessResult face_liveness_result) {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_FaceLivenessResultUpdated(swigCPtr, IdFaceLivenessResult.getCPtr(face_liveness_result));
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AuthenticationStatusUpdated(IdCheckStatus status) {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_AuthenticationStatusUpdated(swigCPtr, (int)status);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GlobalTimeoutReached() {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_GlobalTimeoutReached(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void InstructionTimeoutReached() {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_InstructionTimeoutReached(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SessionEnded() {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_SessionEnded(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MessageReceived(string message) {
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_MessageReceived(swigCPtr, message);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdVideoAuthenticationCallbacks() : this(csidenginePINVOKE.new_IdVideoAuthenticationCallbacks(), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("InstructionReceived", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateIdVideoAuthenticationCallbacks_0(SwigDirectorMethodInstructionReceived);
    if (SwigDerivedClassHasMethod("AnomalyRegistered", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateIdVideoAuthenticationCallbacks_1(SwigDirectorMethodAnomalyRegistered);
    if (SwigDerivedClassHasMethod("DocumentResultUpdated", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateIdVideoAuthenticationCallbacks_2(SwigDirectorMethodDocumentResultUpdated);
    if (SwigDerivedClassHasMethod("FaceMatchingResultUpdated", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateIdVideoAuthenticationCallbacks_3(SwigDirectorMethodFaceMatchingResultUpdated);
    if (SwigDerivedClassHasMethod("FaceLivenessResultUpdated", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateIdVideoAuthenticationCallbacks_4(SwigDirectorMethodFaceLivenessResultUpdated);
    if (SwigDerivedClassHasMethod("AuthenticationStatusUpdated", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateIdVideoAuthenticationCallbacks_5(SwigDirectorMethodAuthenticationStatusUpdated);
    if (SwigDerivedClassHasMethod("GlobalTimeoutReached", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateIdVideoAuthenticationCallbacks_6(SwigDirectorMethodGlobalTimeoutReached);
    if (SwigDerivedClassHasMethod("InstructionTimeoutReached", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateIdVideoAuthenticationCallbacks_7(SwigDirectorMethodInstructionTimeoutReached);
    if (SwigDerivedClassHasMethod("SessionEnded", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateIdVideoAuthenticationCallbacks_8(SwigDirectorMethodSessionEnded);
    if (SwigDerivedClassHasMethod("MessageReceived", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateIdVideoAuthenticationCallbacks_9(SwigDirectorMethodMessageReceived);
    csidenginePINVOKE.IdVideoAuthenticationCallbacks_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(IdVideoAuthenticationCallbacks))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private void SwigDirectorMethodInstructionReceived(int index, global::System.IntPtr instruction) {
    InstructionReceived(index, new IdVideoAuthenticationInstruction(instruction, false));
  }

  private void SwigDirectorMethodAnomalyRegistered(int index, global::System.IntPtr anomaly) {
    AnomalyRegistered(index, new IdVideoAuthenticationAnomaly(anomaly, false));
  }

  private void SwigDirectorMethodDocumentResultUpdated(global::System.IntPtr document_result) {
    DocumentResultUpdated(new IdResult(document_result, false));
  }

  private void SwigDirectorMethodFaceMatchingResultUpdated(global::System.IntPtr face_matching_result) {
    FaceMatchingResultUpdated(new IdFaceSimilarityResult(face_matching_result, false));
  }

  private void SwigDirectorMethodFaceLivenessResultUpdated(global::System.IntPtr face_liveness_result) {
    FaceLivenessResultUpdated(new IdFaceLivenessResult(face_liveness_result, false));
  }

  private void SwigDirectorMethodAuthenticationStatusUpdated(int status) {
    AuthenticationStatusUpdated((IdCheckStatus)status);
  }

  private void SwigDirectorMethodGlobalTimeoutReached() {
    GlobalTimeoutReached();
  }

  private void SwigDirectorMethodInstructionTimeoutReached() {
    InstructionTimeoutReached();
  }

  private void SwigDirectorMethodSessionEnded() {
    SessionEnded();
  }

  private void SwigDirectorMethodMessageReceived(string message) {
    MessageReceived(message);
  }

  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_0(int index, global::System.IntPtr instruction);
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_1(int index, global::System.IntPtr anomaly);
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_2(global::System.IntPtr document_result);
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_3(global::System.IntPtr face_matching_result);
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_4(global::System.IntPtr face_liveness_result);
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_5(int status);
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_6();
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_7();
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_8();
  public delegate void SwigDelegateIdVideoAuthenticationCallbacks_9(string message);

  private SwigDelegateIdVideoAuthenticationCallbacks_0 swigDelegate0;
  private SwigDelegateIdVideoAuthenticationCallbacks_1 swigDelegate1;
  private SwigDelegateIdVideoAuthenticationCallbacks_2 swigDelegate2;
  private SwigDelegateIdVideoAuthenticationCallbacks_3 swigDelegate3;
  private SwigDelegateIdVideoAuthenticationCallbacks_4 swigDelegate4;
  private SwigDelegateIdVideoAuthenticationCallbacks_5 swigDelegate5;
  private SwigDelegateIdVideoAuthenticationCallbacks_6 swigDelegate6;
  private SwigDelegateIdVideoAuthenticationCallbacks_7 swigDelegate7;
  private SwigDelegateIdVideoAuthenticationCallbacks_8 swigDelegate8;
  private SwigDelegateIdVideoAuthenticationCallbacks_9 swigDelegate9;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(int), typeof(IdVideoAuthenticationInstruction) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(int), typeof(IdVideoAuthenticationAnomaly) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(IdResult) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(IdFaceSimilarityResult) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(IdFaceLivenessResult) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(IdCheckStatus) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(string) };
}

}
