//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.id {

  using se.common;

public class IdVideoAuthenticationInstruction : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IdVideoAuthenticationInstruction(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IdVideoAuthenticationInstruction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(IdVideoAuthenticationInstruction obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IdVideoAuthenticationInstruction() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csidenginePINVOKE.delete_IdVideoAuthenticationInstruction(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IdVideoAuthenticationInstruction(int frame_index, string code) : this(csidenginePINVOKE.new_IdVideoAuthenticationInstruction__SWIG_0(frame_index, code), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public IdVideoAuthenticationInstruction(IdVideoAuthenticationInstruction copy) : this(csidenginePINVOKE.new_IdVideoAuthenticationInstruction__SWIG_1(IdVideoAuthenticationInstruction.getCPtr(copy)), true) {
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetFrameIndex() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationInstruction_GetFrameIndex(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFrameIndex(int frame_index) {
    csidenginePINVOKE.IdVideoAuthenticationInstruction_SetFrameIndex(swigCPtr, frame_index);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetInstructionCode() {
    string ret = csidenginePINVOKE.IdVideoAuthenticationInstruction_GetInstructionCode(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInstructionCode(string code) {
    csidenginePINVOKE.IdVideoAuthenticationInstruction_SetInstructionCode(swigCPtr, code);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetParametersCount() {
    int ret = csidenginePINVOKE.IdVideoAuthenticationInstruction_GetParametersCount(swigCPtr);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetParameter(string par_name) {
    string ret = csidenginePINVOKE.IdVideoAuthenticationInstruction_GetParameter(swigCPtr, par_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasParameter(string par_name) {
    bool ret = csidenginePINVOKE.IdVideoAuthenticationInstruction_HasParameter(swigCPtr, par_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetParameter(string par_name, string par_value) {
    csidenginePINVOKE.IdVideoAuthenticationInstruction_SetParameter(swigCPtr, par_name, par_value);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveParameter(string par_name) {
    csidenginePINVOKE.IdVideoAuthenticationInstruction_RemoveParameter(swigCPtr, par_name);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringsMapIterator ParametersBegin() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdVideoAuthenticationInstruction_ParametersBegin(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringsMapIterator ParametersEnd() {
    StringsMapIterator ret = new StringsMapIterator(csidenginePINVOKE.IdVideoAuthenticationInstruction_ParametersEnd(swigCPtr), true);
    if (csidenginePINVOKE.SWIGPendingException.Pending) throw csidenginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
