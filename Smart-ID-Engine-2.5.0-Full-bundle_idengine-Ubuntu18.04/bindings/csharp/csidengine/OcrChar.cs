//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace se.common {

public class OcrChar : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public OcrChar(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(OcrChar obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public static global::System.Runtime.InteropServices.HandleRef swigRelease(OcrChar obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~OcrChar() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cssecommonPINVOKE.delete_OcrChar(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public OcrChar() : this(cssecommonPINVOKE.new_OcrChar__SWIG_0(), true) {
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public OcrChar(OcrCharVariant variants, int variants_count, bool is_highlighted, Quadrangle quad) : this(cssecommonPINVOKE.new_OcrChar__SWIG_1(OcrCharVariant.getCPtr(variants), variants_count, is_highlighted, Quadrangle.getCPtr(quad)), true) {
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public OcrChar(OcrChar other) : this(cssecommonPINVOKE.new_OcrChar__SWIG_2(OcrChar.getCPtr(other)), true) {
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetVariantsCount() {
    int ret = cssecommonPINVOKE.OcrChar_GetVariantsCount(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OcrCharVariant GetVariants() {
    global::System.IntPtr cPtr = cssecommonPINVOKE.OcrChar_GetVariants(swigCPtr);
    OcrCharVariant ret = (cPtr == global::System.IntPtr.Zero) ? null : new OcrCharVariant(cPtr, false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OcrCharVariant GetVariant(int index) {
    OcrCharVariant ret = new OcrCharVariant(cssecommonPINVOKE.OcrChar_GetVariant(swigCPtr, index), false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OcrCharVariant GetMutableVariant(int index) {
    OcrCharVariant ret = new OcrCharVariant(cssecommonPINVOKE.OcrChar_GetMutableVariant(swigCPtr, index), false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetVariant(int index, OcrCharVariant v) {
    cssecommonPINVOKE.OcrChar_SetVariant(swigCPtr, index, OcrCharVariant.getCPtr(v));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Resize(int size) {
    cssecommonPINVOKE.OcrChar_Resize(swigCPtr, size);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetIsHighlighted() {
    bool ret = cssecommonPINVOKE.OcrChar_GetIsHighlighted(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetIsHighlighted(bool is_highlighted) {
    cssecommonPINVOKE.OcrChar_SetIsHighlighted(swigCPtr, is_highlighted);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public Quadrangle GetQuadrangle() {
    Quadrangle ret = new Quadrangle(cssecommonPINVOKE.OcrChar_GetQuadrangle(swigCPtr), false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quadrangle GetMutableQuadrangle() {
    Quadrangle ret = new Quadrangle(cssecommonPINVOKE.OcrChar_GetMutableQuadrangle(swigCPtr), false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetQuadrangle(Quadrangle quad) {
    cssecommonPINVOKE.OcrChar_SetQuadrangle(swigCPtr, Quadrangle.getCPtr(quad));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SortVariants() {
    cssecommonPINVOKE.OcrChar_SortVariants(swigCPtr);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public OcrCharVariant GetFirstVariant() {
    OcrCharVariant ret = new OcrCharVariant(cssecommonPINVOKE.OcrChar_GetFirstVariant(swigCPtr), false);
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Serialize(Serializer serializer) {
    cssecommonPINVOKE.OcrChar_Serialize(swigCPtr, Serializer.getCPtr(serializer));
    if (cssecommonPINVOKE.SWIGPendingException.Pending) throw cssecommonPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
